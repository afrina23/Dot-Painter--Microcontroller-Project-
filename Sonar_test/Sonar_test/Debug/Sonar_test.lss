
Sonar_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001274  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ce  00800090  00800090  00001338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ce  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000372  00000000  00000000  000025fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000591  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000294  00000000  00000000  00002f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000427  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d1f  00000000  00000000  000035bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000042de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__addsf3x+0x2>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__zero_reg__+0x3b>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <Mode+0xca>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <draw_board+0x48>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <LCDBusyLoop+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e4 e7       	ldi	r30, 0x74	; 116
     162:	f2 e1       	ldi	r31, 0x12	; 18
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a0 39       	cpi	r26, 0x90	; 144
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	22 e0       	ldi	r18, 0x02	; 2
     172:	a0 e9       	ldi	r26, 0x90	; 144
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ae 35       	cpi	r26, 0x5E	; 94
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <main>
     184:	0c 94 38 09 	jmp	0x1270	; 0x1270 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
     18c:	87 b3       	in	r24, 0x17	; 23
     18e:	80 7f       	andi	r24, 0xF0	; 240
     190:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
     192:	91 9a       	sbi	0x12, 1	; 18
	CLEAR_RS();		//Read status
     194:	90 98       	cbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     196:	00 00       	nop

	
	do
	{

		SET_E();
     198:	92 9a       	sbi	0x12, 2	; 18
     19a:	00 00       	nop

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
     19c:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     19e:	82 95       	swap	r24
     1a0:	80 7f       	andi	r24, 0xF0	; 240
     1a2:	00 00       	nop

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
     1a4:	92 98       	cbi	0x12, 2	; 18
     1a6:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
     1a8:	92 9a       	sbi	0x12, 2	; 18
     1aa:	00 00       	nop
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
     1ac:	96 b3       	in	r25, 0x16	; 22
     1ae:	00 00       	nop
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
     1b0:	92 98       	cbi	0x12, 2	; 18
     1b2:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
     1b4:	88 23       	and	r24, r24
     1b6:	84 f3       	brlt	.-32     	; 0x198 <LCDBusyLoop+0xc>

	CLEAR_RW();		//write mode
     1b8:	91 98       	cbi	0x12, 1	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     1ba:	87 b3       	in	r24, 0x17	; 23
     1bc:	8f 60       	ori	r24, 0x0F	; 15
     1be:	87 bb       	out	0x17, r24	; 23
     1c0:	08 95       	ret

000001c2 <LCDByte>:
	//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

	uint8_t hn,ln;			//Nibbles
	uint8_t temp;

	hn=c>>4;
     1c2:	28 2f       	mov	r18, r24
     1c4:	22 95       	swap	r18
     1c6:	2f 70       	andi	r18, 0x0F	; 15
	ln=(c & 0x0F);
     1c8:	8f 70       	andi	r24, 0x0F	; 15

	if(isdata==0)
     1ca:	61 11       	cpse	r22, r1
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <LCDByte+0x10>
	CLEAR_RS();
     1ce:	90 98       	cbi	0x12, 0	; 18
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <LCDByte+0x12>
	else
	SET_RS();
     1d2:	90 9a       	sbi	0x12, 0	; 18
     1d4:	00 00       	nop

	_delay_us(0.500);		//tAS

	SET_E();
     1d6:	92 9a       	sbi	0x12, 2	; 18

	//Send high nibble

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     1d8:	98 b3       	in	r25, 0x18	; 24
     1da:	90 7f       	andi	r25, 0xF0	; 240
     1dc:	92 2b       	or	r25, r18
	LCD_DATA_PORT=temp;
     1de:	98 bb       	out	0x18, r25	; 24
     1e0:	00 00       	nop

	_delay_us(1);			//tEH

	//Now data lines are stable pull E low for transmission

	CLEAR_E();
     1e2:	92 98       	cbi	0x12, 2	; 18
     1e4:	00 00       	nop

	_delay_us(1);

	//Send the lower nibble
	SET_E();
     1e6:	92 9a       	sbi	0x12, 2	; 18

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     1e8:	98 b3       	in	r25, 0x18	; 24
     1ea:	90 7f       	andi	r25, 0xF0	; 240
     1ec:	89 2b       	or	r24, r25

	LCD_DATA_PORT=temp;
     1ee:	88 bb       	out	0x18, r24	; 24
     1f0:	00 00       	nop

	_delay_us(1);			//tEH

	//SEND

	CLEAR_E();
     1f2:	92 98       	cbi	0x12, 2	; 18
     1f4:	00 00       	nop

	_delay_us(1);			//tEL

	LCDBusyLoop();
     1f6:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDBusyLoop>
     1fa:	08 95       	ret

000001fc <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	8c 01       	movw	r16, r24
	
	In the same way you can insert any symbol numbered 0-7


	*****************************************************************/
	while(*msg!='\0')
     206:	fc 01       	movw	r30, r24
     208:	80 81       	ld	r24, Z
     20a:	88 23       	and	r24, r24
     20c:	09 f1       	breq	.+66     	; 0x250 <LCDWriteString+0x54>
	{
		//Custom Char Support
		if(*msg=='%')
     20e:	85 32       	cpi	r24, 0x25	; 37
     210:	a9 f4       	brne	.+42     	; 0x23c <LCDWriteString+0x40>
		{
			msg++;
     212:	e8 01       	movw	r28, r16
     214:	21 96       	adiw	r28, 0x01	; 1
			int8_t cc=*msg-'0';
     216:	f8 01       	movw	r30, r16
     218:	81 81       	ldd	r24, Z+1	; 0x01
     21a:	80 53       	subi	r24, 0x30	; 48

			if(cc>=0 && cc<=7)
     21c:	88 30       	cpi	r24, 0x08	; 8
     21e:	20 f4       	brcc	.+8      	; 0x228 <LCDWriteString+0x2c>
			{
				LCDData(cc);
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDByte>
     226:	0e c0       	rjmp	.+28     	; 0x244 <LCDWriteString+0x48>
			}
			else
			{
				LCDData('%');
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	85 e2       	ldi	r24, 0x25	; 37
     22c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDByte>
				LCDData(*msg);
     230:	61 e0       	ldi	r22, 0x01	; 1
     232:	f8 01       	movw	r30, r16
     234:	81 81       	ldd	r24, Z+1	; 0x01
     236:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDByte>
     23a:	04 c0       	rjmp	.+8      	; 0x244 <LCDWriteString+0x48>
			}
		}
		else
		{
			LCDData(*msg);
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDByte>
     242:	e8 01       	movw	r28, r16
		}
		msg++;
     244:	8e 01       	movw	r16, r28
     246:	0f 5f       	subi	r16, 0xFF	; 255
     248:	1f 4f       	sbci	r17, 0xFF	; 255
	
	In the same way you can insert any symbol numbered 0-7


	*****************************************************************/
	while(*msg!='\0')
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	81 11       	cpse	r24, r1
     24e:	df cf       	rjmp	.-66     	; 0x20e <LCDWriteString+0x12>
		{
			LCDData(*msg);
		}
		msg++;
	}
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	08 95       	ret

0000025a <LCDGotoXY>:
	}
}

void LCDGotoXY(uint8_t x,uint8_t y)
{
	if(x>=16) return;
     25a:	80 31       	cpi	r24, 0x10	; 16
     25c:	38 f4       	brcc	.+14     	; 0x26c <LCDGotoXY+0x12>
	
	switch(y)
     25e:	61 30       	cpi	r22, 0x01	; 1
     260:	09 f4       	brne	.+2      	; 0x264 <LCDGotoXY+0xa>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     262:	80 64       	ori	r24, 0x40	; 64
		break;
	}
	
	x |= 0b10000000;
	LCDCmd(x);
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	80 68       	ori	r24, 0x80	; 128
     268:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDByte>
     26c:	08 95       	ret

0000026e <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
     26e:	cf 93       	push	r28
     270:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     272:	8b e4       	ldi	r24, 0x4B	; 75
     274:	9d e1       	ldi	r25, 0x1D	; 29
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <LCDInit+0x8>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <LCDInit+0xe>
     27c:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     27e:	87 b3       	in	r24, 0x17	; 23
     280:	8f 60       	ori	r24, 0x0F	; 15
     282:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     284:	8a 9a       	sbi	0x11, 2	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     286:	88 9a       	sbi	0x11, 0	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     288:	89 9a       	sbi	0x11, 1	; 17

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     28a:	88 b3       	in	r24, 0x18	; 24
     28c:	80 7f       	andi	r24, 0xF0	; 240
     28e:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     290:	92 98       	cbi	0x12, 2	; 18
	CLEAR_RW();
     292:	91 98       	cbi	0x12, 1	; 18
	CLEAR_RS();
     294:	90 98       	cbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     296:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     298:	92 9a       	sbi	0x12, 2	; 18
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     29a:	c1 9a       	sbi	0x18, 1	; 24
     29c:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
     29e:	92 98       	cbi	0x12, 2	; 18
     2a0:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     2a2:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	8c 2f       	mov	r24, r28
     2aa:	8c 60       	ori	r24, 0x0C	; 12
     2ac:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	88 e2       	ldi	r24, 0x28	; 40
     2b4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDByte>

	
	LCDGotoXY(0,0);
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDGotoXY>

}
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <mirror_board>:
		}
	}
}


void mirror_board(){
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	a4 e8       	ldi	r26, 0x84	; 132
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	c4 e0       	ldi	r28, 0x04	; 4
     2d2:	d2 e0       	ldi	r29, 0x02	; 2
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	11 c0       	rjmp	.+34     	; 0x2fc <mirror_board+0x38>
	for (int i=0; i<BOARD_SIZE; i++){
		for (int j=0; j<BOARD_SIZE; j++){
			int temp = rotated_board[i][j];
     2da:	2d 91       	ld	r18, X+
     2dc:	3c 91       	ld	r19, X
     2de:	11 97       	sbiw	r26, 0x01	; 1
			rotated_board[i][j] = rotated_board[i][BOARD_SIZE-1-j];
     2e0:	52 91       	ld	r21, -Z
     2e2:	42 91       	ld	r20, -Z
     2e4:	4d 93       	st	X+, r20
     2e6:	5d 93       	st	X+, r21
			rotated_board[i][BOARD_SIZE-1-j] = temp;
     2e8:	31 83       	std	Z+1, r19	; 0x01
     2ea:	20 83       	st	Z, r18
}


void mirror_board(){
	for (int i=0; i<BOARD_SIZE; i++){
		for (int j=0; j<BOARD_SIZE; j++){
     2ec:	01 96       	adiw	r24, 0x01	; 1
     2ee:	88 30       	cpi	r24, 0x08	; 8
     2f0:	91 05       	cpc	r25, r1
     2f2:	99 f7       	brne	.-26     	; 0x2da <mirror_board+0x16>
	}
}


void mirror_board(){
	for (int i=0; i<BOARD_SIZE; i++){
     2f4:	c6 17       	cp	r28, r22
     2f6:	d7 07       	cpc	r29, r23
     2f8:	41 f0       	breq	.+16     	; 0x30a <mirror_board+0x46>
     2fa:	db 01       	movw	r26, r22
     2fc:	bd 01       	movw	r22, r26
     2fe:	60 5f       	subi	r22, 0xF0	; 240
     300:	7f 4f       	sbci	r23, 0xFF	; 255
		}
	}
}


void mirror_board(){
     302:	fb 01       	movw	r30, r22
     304:	80 2f       	mov	r24, r16
     306:	91 2f       	mov	r25, r17
     308:	e8 cf       	rjmp	.-48     	; 0x2da <mirror_board+0x16>
			int temp = rotated_board[i][j];
			rotated_board[i][j] = rotated_board[i][BOARD_SIZE-1-j];
			rotated_board[i][BOARD_SIZE-1-j] = temp;
		}
	}
}
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	0f 91       	pop	r16
     312:	08 95       	ret

00000314 <set_column_values_from_board>:

void set_column_values_from_board (){
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	66 e9       	ldi	r22, 0x96	; 150
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	aa ef       	ldi	r26, 0xFA	; 250
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	06 ea       	ldi	r16, 0xA6	; 166
     32e:	10 e0       	ldi	r17, 0x00	; 0
     330:	0f 2e       	mov	r0, r31
     332:	f7 e0       	ldi	r31, 0x07	; 7
     334:	cf 2e       	mov	r12, r31
     336:	f0 2d       	mov	r31, r0
     338:	d1 2c       	mov	r13, r1
     33a:	e1 2c       	mov	r14, r1
     33c:	f1 2c       	mov	r15, r1
     33e:	eb 01       	movw	r28, r22
     340:	fd 01       	movw	r30, r26
     342:	8c 2d       	mov	r24, r12
     344:	9d 2d       	mov	r25, r13
     346:	2e 2d       	mov	r18, r14
     348:	3f 2d       	mov	r19, r15
	for (int i=0; i<BOARD_SIZE; i++){
		column_selector[i] = 0;
		for (int j=0; j<BOARD_SIZE; j++){
			column_selector[i] |= (BOARD[i][j] << (BOARD_SIZE-1-j));			
     34a:	41 91       	ld	r20, Z+
     34c:	51 91       	ld	r21, Z+
     34e:	08 2e       	mov	r0, r24
     350:	02 c0       	rjmp	.+4      	; 0x356 <set_column_values_from_board+0x42>
     352:	44 0f       	add	r20, r20
     354:	55 1f       	adc	r21, r21
     356:	0a 94       	dec	r0
     358:	e2 f7       	brpl	.-8      	; 0x352 <set_column_values_from_board+0x3e>
     35a:	24 2b       	or	r18, r20
     35c:	35 2b       	or	r19, r21
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	a0 f7       	brcc	.-24     	; 0x34a <set_column_values_from_board+0x36>
     362:	39 83       	std	Y+1, r19	; 0x01
     364:	28 83       	st	Y, r18
     366:	6e 5f       	subi	r22, 0xFE	; 254
     368:	7f 4f       	sbci	r23, 0xFF	; 255
     36a:	50 96       	adiw	r26, 0x10	; 16
		}
	}
}

void set_column_values_from_board (){
	for (int i=0; i<BOARD_SIZE; i++){
     36c:	60 17       	cp	r22, r16
     36e:	71 07       	cpc	r23, r17
     370:	31 f7       	brne	.-52     	; 0x33e <set_column_values_from_board+0x2a>
		column_selector[i] = 0;
		for (int j=0; j<BOARD_SIZE; j++){
			column_selector[i] |= (BOARD[i][j] << (BOARD_SIZE-1-j));			
		}
	}
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	08 95       	ret

00000384 <draw_board>:


void draw_board(){
     384:	cf 93       	push	r28
	mirror_board();
     386:	0e 94 62 01 	call	0x2c4	; 0x2c4 <mirror_board>
	set_column_values_from_board();
     38a:	0e 94 8a 01 	call	0x314	; 0x314 <set_column_values_from_board>
     38e:	24 ef       	ldi	r18, 0xF4	; 244
     390:	31 e0       	ldi	r19, 0x01	; 1
     392:	62 e6       	ldi	r22, 0x62	; 98
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	46 e9       	ldi	r20, 0x96	; 150
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	8a e6       	ldi	r24, 0x6A	; 106
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	13 c0       	rjmp	.+38     	; 0x3c6 <draw_board+0x42>
	int k;
	for(k=0;k<500;k++){		
		for (int i=0; i<BOARD_SIZE; i++)
		{
			PORTA = row_selector[i];
     3a0:	cd 91       	ld	r28, X+
     3a2:	cb bb       	out	0x1b, r28	; 27
			PORTC = ~column_selector[i];
     3a4:	c0 81       	ld	r28, Z
     3a6:	32 96       	adiw	r30, 0x02	; 2
     3a8:	c0 95       	com	r28
     3aa:	c5 bb       	out	0x15, r28	; 21
     3ac:	c1 e2       	ldi	r28, 0x21	; 33
     3ae:	ca 95       	dec	r28
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <draw_board+0x2a>
     3b2:	00 00       	nop
void draw_board(){
	mirror_board();
	set_column_values_from_board();
	int k;
	for(k=0;k<500;k++){		
		for (int i=0; i<BOARD_SIZE; i++)
     3b4:	a8 17       	cp	r26, r24
     3b6:	b9 07       	cpc	r27, r25
     3b8:	99 f7       	brne	.-26     	; 0x3a0 <draw_board+0x1c>
		{
			PORTA = row_selector[i];
			PORTC = ~column_selector[i];
			_delay_us(100);
		}
		PORTA = 0;
     3ba:	1b ba       	out	0x1b, r1	; 27
     3bc:	21 50       	subi	r18, 0x01	; 1
     3be:	31 09       	sbc	r19, r1

void draw_board(){
	mirror_board();
	set_column_values_from_board();
	int k;
	for(k=0;k<500;k++){		
     3c0:	21 15       	cp	r18, r1
     3c2:	31 05       	cpc	r19, r1
     3c4:	19 f0       	breq	.+6      	; 0x3cc <draw_board+0x48>
     3c6:	db 01       	movw	r26, r22
     3c8:	fa 01       	movw	r30, r20
     3ca:	ea cf       	rjmp	.-44     	; 0x3a0 <draw_board+0x1c>
			PORTC = ~column_selector[i];
			_delay_us(100);
		}
		PORTA = 0;
	}
}
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <get_index_from_distance_y>:


int get_index_from_distance_y (int distance){
	
	int index = -1;
	distance=round(distance);
     3d0:	bc 01       	movw	r22, r24
     3d2:	88 27       	eor	r24, r24
     3d4:	77 fd       	sbrc	r23, 7
     3d6:	80 95       	com	r24
     3d8:	98 2f       	mov	r25, r24
     3da:	0e 94 c8 05 	call	0xb90	; 0xb90 <__floatsisf>
     3de:	0e 94 78 06 	call	0xcf0	; 0xcf0 <round>
     3e2:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fixsfsi>
	
	if (distance >= 3 && distance < 4) index = 0;
     3e6:	63 30       	cpi	r22, 0x03	; 3
     3e8:	71 05       	cpc	r23, r1
     3ea:	c1 f0       	breq	.+48     	; 0x41c <get_index_from_distance_y+0x4c>
	else if (distance >= 4 && distance < 5) index = 1;
     3ec:	64 30       	cpi	r22, 0x04	; 4
     3ee:	71 05       	cpc	r23, r1
     3f0:	c1 f0       	breq	.+48     	; 0x422 <get_index_from_distance_y+0x52>
	else if (distance >= 5 && distance < 6) index = 2;
     3f2:	65 30       	cpi	r22, 0x05	; 5
     3f4:	71 05       	cpc	r23, r1
     3f6:	c1 f0       	breq	.+48     	; 0x428 <get_index_from_distance_y+0x58>
	else if (distance >= 6 && distance < 7) index = 3;
     3f8:	66 30       	cpi	r22, 0x06	; 6
     3fa:	71 05       	cpc	r23, r1
     3fc:	c1 f0       	breq	.+48     	; 0x42e <get_index_from_distance_y+0x5e>
	else if (distance >= 7 && distance < 8) index = 4;
     3fe:	67 30       	cpi	r22, 0x07	; 7
     400:	71 05       	cpc	r23, r1
     402:	c1 f0       	breq	.+48     	; 0x434 <get_index_from_distance_y+0x64>
	else if (distance >= 8 && distance < 9) index = 5;
     404:	68 30       	cpi	r22, 0x08	; 8
     406:	71 05       	cpc	r23, r1
     408:	c1 f0       	breq	.+48     	; 0x43a <get_index_from_distance_y+0x6a>
	else if (distance >= 9 && distance < 10) index = 6;
     40a:	69 30       	cpi	r22, 0x09	; 9
     40c:	71 05       	cpc	r23, r1
     40e:	c1 f0       	breq	.+48     	; 0x440 <get_index_from_distance_y+0x70>
	else if (distance >= 10 && distance < 11) index = 7;
     410:	6a 30       	cpi	r22, 0x0A	; 10
     412:	71 05       	cpc	r23, r1
     414:	c1 f0       	breq	.+48     	; 0x446 <get_index_from_distance_y+0x76>
}


int get_index_from_distance_y (int distance){
	
	int index = -1;
     416:	8f ef       	ldi	r24, 0xFF	; 255
     418:	9f ef       	ldi	r25, 0xFF	; 255
     41a:	08 95       	ret
	distance=round(distance);
	
	if (distance >= 3 && distance < 4) index = 0;
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	08 95       	ret
	else if (distance >= 4 && distance < 5) index = 1;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	08 95       	ret
	else if (distance >= 5 && distance < 6) index = 2;
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	08 95       	ret
	else if (distance >= 6 && distance < 7) index = 3;
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	08 95       	ret
	else if (distance >= 7 && distance < 8) index = 4;
     434:	84 e0       	ldi	r24, 0x04	; 4
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	08 95       	ret
	else if (distance >= 8 && distance < 9) index = 5;
     43a:	85 e0       	ldi	r24, 0x05	; 5
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	08 95       	ret
	else if (distance >= 9 && distance < 10) index = 6;
     440:	86 e0       	ldi	r24, 0x06	; 6
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	08 95       	ret
	else if (distance >= 10 && distance < 11) index = 7;
     446:	87 e0       	ldi	r24, 0x07	; 7
     448:	90 e0       	ldi	r25, 0x00	; 0
	
	return index;
}
     44a:	08 95       	ret

0000044c <get_index_from_distance_x>:
int get_index_from_distance_x (int distance){
	
	int index = -1;
	distance=round(distance);
     44c:	bc 01       	movw	r22, r24
     44e:	88 27       	eor	r24, r24
     450:	77 fd       	sbrc	r23, 7
     452:	80 95       	com	r24
     454:	98 2f       	mov	r25, r24
     456:	0e 94 c8 05 	call	0xb90	; 0xb90 <__floatsisf>
     45a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <round>
     45e:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fixsfsi>
     462:	9b 01       	movw	r18, r22
	if(distance==3) distance=4;
     464:	63 50       	subi	r22, 0x03	; 3
     466:	71 09       	sbc	r23, r1
     468:	62 30       	cpi	r22, 0x02	; 2
     46a:	71 05       	cpc	r23, r1
     46c:	c0 f0       	brcs	.+48     	; 0x49e <get_index_from_distance_x+0x52>
	if (distance >= 4 && distance < 5) index = 0;
	else if (distance >= 5 && distance < 6) index = 1;
     46e:	25 30       	cpi	r18, 0x05	; 5
     470:	31 05       	cpc	r19, r1
     472:	c1 f0       	breq	.+48     	; 0x4a4 <get_index_from_distance_x+0x58>
	else if (distance >= 6 && distance < 7) index = 2;
     474:	26 30       	cpi	r18, 0x06	; 6
     476:	31 05       	cpc	r19, r1
     478:	c1 f0       	breq	.+48     	; 0x4aa <get_index_from_distance_x+0x5e>
	else if (distance >= 7 && distance < 8) index = 3;
     47a:	27 30       	cpi	r18, 0x07	; 7
     47c:	31 05       	cpc	r19, r1
     47e:	c1 f0       	breq	.+48     	; 0x4b0 <get_index_from_distance_x+0x64>
	else if (distance >= 8 && distance < 9) index = 4;
     480:	28 30       	cpi	r18, 0x08	; 8
     482:	31 05       	cpc	r19, r1
     484:	c1 f0       	breq	.+48     	; 0x4b6 <get_index_from_distance_x+0x6a>
	else if (distance >= 9 && distance < 10) index = 5;
     486:	29 30       	cpi	r18, 0x09	; 9
     488:	31 05       	cpc	r19, r1
     48a:	c1 f0       	breq	.+48     	; 0x4bc <get_index_from_distance_x+0x70>
	else if (distance >= 10 && distance < 11) index = 6;
     48c:	2a 30       	cpi	r18, 0x0A	; 10
     48e:	31 05       	cpc	r19, r1
     490:	c1 f0       	breq	.+48     	; 0x4c2 <get_index_from_distance_x+0x76>
	else if (distance >= 11 && distance < 12) index = 7;
     492:	2b 30       	cpi	r18, 0x0B	; 11
     494:	31 05       	cpc	r19, r1
     496:	c1 f0       	breq	.+48     	; 0x4c8 <get_index_from_distance_x+0x7c>
	
	return index;
}
int get_index_from_distance_x (int distance){
	
	int index = -1;
     498:	8f ef       	ldi	r24, 0xFF	; 255
     49a:	9f ef       	ldi	r25, 0xFF	; 255
     49c:	08 95       	ret
	distance=round(distance);
	if(distance==3) distance=4;
	if (distance >= 4 && distance < 5) index = 0;
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	08 95       	ret
	else if (distance >= 5 && distance < 6) index = 1;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	08 95       	ret
	else if (distance >= 6 && distance < 7) index = 2;
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	08 95       	ret
	else if (distance >= 7 && distance < 8) index = 3;
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	08 95       	ret
	else if (distance >= 8 && distance < 9) index = 4;
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	08 95       	ret
	else if (distance >= 9 && distance < 10) index = 5;
     4bc:	85 e0       	ldi	r24, 0x05	; 5
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	08 95       	ret
	else if (distance >= 10 && distance < 11) index = 6;
     4c2:	86 e0       	ldi	r24, 0x06	; 6
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	08 95       	ret
	else if (distance >= 11 && distance < 12) index = 7;
     4c8:	87 e0       	ldi	r24, 0x07	; 7
     4ca:	90 e0       	ldi	r25, 0x00	; 0
	
	return index;
}
     4cc:	08 95       	ret

000004ce <set_cursor_from_sensor_data>:


void set_cursor_from_sensor_data (int posX, int posY){	
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	8b 01       	movw	r16, r22
	
	cursorY = BOARD_SIZE - 1 - (int) (posY - offsetY);	
*/


	cursorX = get_index_from_distance_x(posX);
     4d8:	0e 94 26 02 	call	0x44c	; 0x44c <get_index_from_distance_x>
     4dc:	ec 01       	movw	r28, r24
     4de:	90 93 95 00 	sts	0x0095, r25
     4e2:	80 93 94 00 	sts	0x0094, r24
	cursorY = get_index_from_distance_y(posY);
     4e6:	c8 01       	movw	r24, r16
     4e8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <get_index_from_distance_y>
     4ec:	9c 01       	movw	r18, r24
     4ee:	90 93 93 00 	sts	0x0093, r25
     4f2:	80 93 92 00 	sts	0x0092, r24
	
	if (cursorY < 0 || cursorX < 0) return;	
     4f6:	99 23       	and	r25, r25
     4f8:	54 f1       	brlt	.+84     	; 0x54e <set_cursor_from_sensor_data+0x80>
     4fa:	dd 23       	and	r29, r29
     4fc:	44 f1       	brlt	.+80     	; 0x54e <set_cursor_from_sensor_data+0x80>
		cursorY--;
		prevPosY = posY;
	}

	*/
	if (mode == DRAW_MODE){
     4fe:	80 91 6a 00 	lds	r24, 0x006A
     502:	90 91 6b 00 	lds	r25, 0x006B
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	91 05       	cpc	r25, r1
     50a:	89 f4       	brne	.+34     	; 0x52e <set_cursor_from_sensor_data+0x60>
		BOARD[cursorY][cursorX] = 1;		
     50c:	22 0f       	add	r18, r18
     50e:	33 1f       	adc	r19, r19
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	22 0f       	add	r18, r18
     516:	33 1f       	adc	r19, r19
     518:	c2 0f       	add	r28, r18
     51a:	d3 1f       	adc	r29, r19
     51c:	cc 0f       	add	r28, r28
     51e:	dd 1f       	adc	r29, r29
     520:	c6 50       	subi	r28, 0x06	; 6
     522:	df 4f       	sbci	r29, 0xFF	; 255
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	99 83       	std	Y+1, r25	; 0x01
     52a:	88 83       	st	Y, r24
     52c:	10 c0       	rjmp	.+32     	; 0x54e <set_cursor_from_sensor_data+0x80>
	} else if (mode == ERASE_MODE){
     52e:	89 2b       	or	r24, r25
     530:	71 f4       	brne	.+28     	; 0x54e <set_cursor_from_sensor_data+0x80>
		BOARD[cursorY][cursorX] = 0;
     532:	22 0f       	add	r18, r18
     534:	33 1f       	adc	r19, r19
     536:	22 0f       	add	r18, r18
     538:	33 1f       	adc	r19, r19
     53a:	22 0f       	add	r18, r18
     53c:	33 1f       	adc	r19, r19
     53e:	c2 0f       	add	r28, r18
     540:	d3 1f       	adc	r29, r19
     542:	cc 0f       	add	r28, r28
     544:	dd 1f       	adc	r29, r29
     546:	c6 50       	subi	r28, 0x06	; 6
     548:	df 4f       	sbci	r29, 0xFF	; 255
     54a:	19 82       	std	Y+1, r1	; 0x01
     54c:	18 82       	st	Y, r1
	}
	
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	08 95       	ret

00000558 <initialize_for_matrix_output>:
}


void initialize_for_matrix_output(){
	
	DDRA = 0xFF;	//row
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;	//column
     55c:	84 bb       	out	0x14, r24	; 20
     55e:	08 95       	ret

00000560 <reset_board>:
}



void reset_board(){
     560:	2a ef       	ldi	r18, 0xFA	; 250
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	4a e7       	ldi	r20, 0x7A	; 122
     566:	51 e0       	ldi	r21, 0x01	; 1
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	0b c0       	rjmp	.+22     	; 0x584 <reset_board+0x24>
	for (int i=0; i<BOARD_SIZE; i++)
	{
		for (int j=0; j<BOARD_SIZE; j++)
		{
			BOARD[i][j] = 0;
     56e:	11 92       	st	Z+, r1
     570:	11 92       	st	Z+, r1


void reset_board(){
	for (int i=0; i<BOARD_SIZE; i++)
	{
		for (int j=0; j<BOARD_SIZE; j++)
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	88 30       	cpi	r24, 0x08	; 8
     576:	91 05       	cpc	r25, r1
     578:	d1 f7       	brne	.-12     	; 0x56e <reset_board+0xe>
     57a:	20 5f       	subi	r18, 0xF0	; 240
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
}



void reset_board(){
	for (int i=0; i<BOARD_SIZE; i++)
     57e:	24 17       	cp	r18, r20
     580:	35 07       	cpc	r19, r21
     582:	21 f0       	breq	.+8      	; 0x58c <reset_board+0x2c>
	DDRC = 0xFF;	//column
}



void reset_board(){
     584:	f9 01       	movw	r30, r18
     586:	87 2f       	mov	r24, r23
     588:	96 2f       	mov	r25, r22
     58a:	f1 cf       	rjmp	.-30     	; 0x56e <reset_board+0xe>
		for (int j=0; j<BOARD_SIZE; j++)
		{
			BOARD[i][j] = 0;
		}
	}
	draw_board();
     58c:	0e 94 c2 01 	call	0x384	; 0x384 <draw_board>
	cursorX=0; cursorY=0;
     590:	10 92 95 00 	sts	0x0095, r1
     594:	10 92 94 00 	sts	0x0094, r1
     598:	10 92 93 00 	sts	0x0093, r1
     59c:	10 92 92 00 	sts	0x0092, r1
     5a0:	08 95       	ret

000005a2 <__vector_9>:
double arrayX[20], arrayY[20];

int myDrawingMode = DRAW_MODE;

ISR(TIMER1_OVF_vect)
{
     5a2:	1f 92       	push	r1
     5a4:	0f 92       	push	r0
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	0f 92       	push	r0
     5aa:	11 24       	eor	r1, r1
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
	TimerOverflow++;	/* Increment Timer Overflow count */
     5b0:	80 91 90 00 	lds	r24, 0x0090
     5b4:	90 91 91 00 	lds	r25, 0x0091
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	90 93 91 00 	sts	0x0091, r25
     5be:	80 93 90 00 	sts	0x0090, r24
}
     5c2:	9f 91       	pop	r25
     5c4:	8f 91       	pop	r24
     5c6:	0f 90       	pop	r0
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	0f 90       	pop	r0
     5cc:	1f 90       	pop	r1
     5ce:	18 95       	reti

000005d0 <Mode>:
double Mode(double a[],int n) {
     5d0:	2f 92       	push	r2
     5d2:	3f 92       	push	r3
     5d4:	4f 92       	push	r4
     5d6:	5f 92       	push	r5
     5d8:	6f 92       	push	r6
     5da:	7f 92       	push	r7
     5dc:	8f 92       	push	r8
     5de:	9f 92       	push	r9
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <Mode+0x26>
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <Mode+0x28>
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <Mode+0x2a>
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
	double maxValue = 0;
	int  maxCount = 0, i, j;

	for (i = 0; i < n; ++i) {
     5fe:	16 16       	cp	r1, r22
     600:	17 06       	cpc	r1, r23
     602:	0c f0       	brlt	.+2      	; 0x606 <Mode+0x36>
     604:	58 c0       	rjmp	.+176    	; 0x6b6 <Mode+0xe6>
     606:	7b 01       	movw	r14, r22
     608:	ee 0c       	add	r14, r14
     60a:	ff 1c       	adc	r15, r15
     60c:	ee 0c       	add	r14, r14
     60e:	ff 1c       	adc	r15, r15
     610:	e8 0e       	add	r14, r24
     612:	f9 1e       	adc	r15, r25
     614:	6c 01       	movw	r12, r24
{
	TimerOverflow++;	/* Increment Timer Overflow count */
}
double Mode(double a[],int n) {
	double maxValue = 0;
	int  maxCount = 0, i, j;
     616:	a1 2c       	mov	r10, r1
     618:	b1 2c       	mov	r11, r1
ISR(TIMER1_OVF_vect)
{
	TimerOverflow++;	/* Increment Timer Overflow count */
}
double Mode(double a[],int n) {
	double maxValue = 0;
     61a:	19 82       	std	Y+1, r1	; 0x01
     61c:	1a 82       	std	Y+2, r1	; 0x02
     61e:	1b 82       	std	Y+3, r1	; 0x03
     620:	1c 82       	std	Y+4, r1	; 0x04

	for (i = 0; i < n; ++i) {
		int count = 0;
		double diff;
		for (j = 0; j < n; ++j) {
			diff=abs(a[j]-a[i]);
     622:	48 2e       	mov	r4, r24
     624:	59 2e       	mov	r5, r25
     626:	31 2c       	mov	r3, r1
     628:	21 2c       	mov	r2, r1
     62a:	3b c0       	rjmp	.+118    	; 0x6a2 <Mode+0xd2>
     62c:	ed 81       	ldd	r30, Y+5	; 0x05
     62e:	fe 81       	ldd	r31, Y+6	; 0x06
     630:	61 91       	ld	r22, Z+
     632:	71 91       	ld	r23, Z+
     634:	81 91       	ld	r24, Z+
     636:	91 91       	ld	r25, Z+
     638:	fe 83       	std	Y+6, r31	; 0x06
     63a:	ed 83       	std	Y+5, r30	; 0x05
     63c:	26 2d       	mov	r18, r6
     63e:	37 2d       	mov	r19, r7
     640:	48 2d       	mov	r20, r8
     642:	59 2d       	mov	r21, r9
     644:	0e 94 c4 04 	call	0x988	; 0x988 <__subsf3>
     648:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fixsfsi>
     64c:	9b 01       	movw	r18, r22
     64e:	77 23       	and	r23, r23
     650:	24 f4       	brge	.+8      	; 0x65a <Mode+0x8a>
     652:	22 27       	eor	r18, r18
     654:	33 27       	eor	r19, r19
     656:	26 1b       	sub	r18, r22
     658:	37 0b       	sbc	r19, r23
     65a:	b9 01       	movw	r22, r18
     65c:	88 27       	eor	r24, r24
     65e:	77 fd       	sbrc	r23, 7
     660:	80 95       	com	r24
     662:	98 2f       	mov	r25, r24
     664:	0e 94 c8 05 	call	0xb90	; 0xb90 <__floatsisf>
			if (diff<.6)
     668:	2a e9       	ldi	r18, 0x9A	; 154
     66a:	39 e9       	ldi	r19, 0x99	; 153
     66c:	49 e1       	ldi	r20, 0x19	; 25
     66e:	5f e3       	ldi	r21, 0x3F	; 63
     670:	0e 94 29 05 	call	0xa52	; 0xa52 <__cmpsf2>
     674:	88 23       	and	r24, r24
     676:	14 f4       	brge	.+4      	; 0x67c <Mode+0xac>
			++count;
     678:	0f 5f       	subi	r16, 0xFF	; 255
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
	int  maxCount = 0, i, j;

	for (i = 0; i < n; ++i) {
		int count = 0;
		double diff;
		for (j = 0; j < n; ++j) {
     67c:	8d 81       	ldd	r24, Y+5	; 0x05
     67e:	9e 81       	ldd	r25, Y+6	; 0x06
     680:	8e 15       	cp	r24, r14
     682:	9f 05       	cpc	r25, r15
     684:	99 f6       	brne	.-90     	; 0x62c <Mode+0x5c>
			diff=abs(a[j]-a[i]);
			if (diff<.6)
			++count;
		}
		
		if (count > maxCount) {
     686:	a0 16       	cp	r10, r16
     688:	b1 06       	cpc	r11, r17
     68a:	2c f4       	brge	.+10     	; 0x696 <Mode+0xc6>
     68c:	58 01       	movw	r10, r16
			maxCount = count;
			maxValue = a[i];
     68e:	69 82       	std	Y+1, r6	; 0x01
     690:	7a 82       	std	Y+2, r7	; 0x02
     692:	8b 82       	std	Y+3, r8	; 0x03
     694:	9c 82       	std	Y+4, r9	; 0x04
     696:	94 e0       	ldi	r25, 0x04	; 4
     698:	c9 0e       	add	r12, r25
     69a:	d1 1c       	adc	r13, r1
}
double Mode(double a[],int n) {
	double maxValue = 0;
	int  maxCount = 0, i, j;

	for (i = 0; i < n; ++i) {
     69c:	ce 14       	cp	r12, r14
     69e:	df 04       	cpc	r13, r15
     6a0:	71 f0       	breq	.+28     	; 0x6be <Mode+0xee>
		int count = 0;
		double diff;
		for (j = 0; j < n; ++j) {
			diff=abs(a[j]-a[i]);
     6a2:	f6 01       	movw	r30, r12
     6a4:	60 80       	ld	r6, Z
     6a6:	71 80       	ldd	r7, Z+1	; 0x01
     6a8:	82 80       	ldd	r8, Z+2	; 0x02
     6aa:	93 80       	ldd	r9, Z+3	; 0x03
     6ac:	4d 82       	std	Y+5, r4	; 0x05
     6ae:	5e 82       	std	Y+6, r5	; 0x06
     6b0:	03 2d       	mov	r16, r3
     6b2:	12 2d       	mov	r17, r2
     6b4:	bb cf       	rjmp	.-138    	; 0x62c <Mode+0x5c>
ISR(TIMER1_OVF_vect)
{
	TimerOverflow++;	/* Increment Timer Overflow count */
}
double Mode(double a[],int n) {
	double maxValue = 0;
     6b6:	19 82       	std	Y+1, r1	; 0x01
     6b8:	1a 82       	std	Y+2, r1	; 0x02
     6ba:	1b 82       	std	Y+3, r1	; 0x03
     6bc:	1c 82       	std	Y+4, r1	; 0x04
			maxValue = a[i];
		}
	}

	return maxValue;
}
     6be:	69 81       	ldd	r22, Y+1	; 0x01
     6c0:	7a 81       	ldd	r23, Y+2	; 0x02
     6c2:	8b 81       	ldd	r24, Y+3	; 0x03
     6c4:	9c 81       	ldd	r25, Y+4	; 0x04
     6c6:	26 96       	adiw	r28, 0x06	; 6
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	df 90       	pop	r13
     6e0:	cf 90       	pop	r12
     6e2:	bf 90       	pop	r11
     6e4:	af 90       	pop	r10
     6e6:	9f 90       	pop	r9
     6e8:	8f 90       	pop	r8
     6ea:	7f 90       	pop	r7
     6ec:	6f 90       	pop	r6
     6ee:	5f 90       	pop	r5
     6f0:	4f 90       	pop	r4
     6f2:	3f 90       	pop	r3
     6f4:	2f 90       	pop	r2
     6f6:	08 95       	ret

000006f8 <main>:

int main(void)
{
	MCUCSR = (1 << JTD);
     6f8:	80 e8       	ldi	r24, 0x80	; 128
     6fa:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1 << JTD);
     6fc:	84 bf       	out	0x34, r24	; 52
	//char string[10];
	long count;
	double distance;
	int x,y;
	
	DDRB|=0b00010000;  //for selecting between two sensors setting PB4=1
     6fe:	bc 9a       	sbi	0x17, 4	; 23
    DDRD =0x80;		/* Make trigger pin as output */
     700:	81 bb       	out	0x11, r24	; 17
	DDRD &= (0b11110111);
     702:	8b 98       	cbi	0x11, 3	; 17
	initialize_for_matrix_output();
     704:	0e 94 ac 02 	call	0x558	; 0x558 <initialize_for_matrix_output>
	PORTD = 0xFF;		/* Turn on Pull-up */
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	82 bb       	out	0x12, r24	; 18
	
	LCDInit(LS_BLINK);
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	0e 94 37 01 	call	0x26e	; 0x26e <LCDInit>
	LCDWriteStringXY(0, 0, "Ultrasonic");
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDGotoXY>
     71a:	8c e6       	ldi	r24, 0x6C	; 108
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDWriteString>
	
	sei();			/* Enable global interrupt */
     722:	78 94       	sei
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
     724:	84 e0       	ldi	r24, 0x04	; 4
     726:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
     728:	1f bc       	out	0x2f, r1	; 47
     72a:	0f 2e       	mov	r0, r31
     72c:	f6 e3       	ldi	r31, 0x36	; 54
     72e:	cf 2e       	mov	r12, r31
     730:	f2 e0       	ldi	r31, 0x02	; 2
     732:	df 2e       	mov	r13, r31
     734:	f0 2d       	mov	r31, r0
		PORTD |= (1 << Trigger_pin);
		_delay_us(10);
		PORTD &= (~(1 << Trigger_pin));
		
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
     736:	0f 2e       	mov	r0, r31
     738:	f1 e4       	ldi	r31, 0x41	; 65
     73a:	8f 2e       	mov	r8, r31
     73c:	f0 2d       	mov	r31, r0
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     73e:	68 94       	set
     740:	bb 24       	eor	r11, r11
     742:	b5 f8       	bld	r11, 5
		PORTD |= (1 << Trigger_pin);
		_delay_us(10);
		PORTD &= (~(1 << Trigger_pin));
		
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
     744:	68 2c       	mov	r6, r8
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     746:	7b 2c       	mov	r7, r11
     748:	0f 2e       	mov	r0, r31
     74a:	fe ec       	ldi	r31, 0xCE	; 206
     74c:	ef 2e       	mov	r14, r31
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	ff 2e       	mov	r15, r31
     752:	f0 2d       	mov	r31, r0
     754:	0f 2e       	mov	r0, r31
     756:	fe e0       	ldi	r31, 0x0E	; 14
     758:	2f 2e       	mov	r2, r31
     75a:	f2 e0       	ldi	r31, 0x02	; 2
     75c:	3f 2e       	mov	r3, r31
     75e:	f0 2d       	mov	r31, r0
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
     760:	68 94       	set
     762:	aa 24       	eor	r10, r10
     764:	a2 f8       	bld	r10, 2

		/*Calculate width of Echo by Input Capture (ICP) */
		
		while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
     766:	99 24       	eor	r9, r9
     768:	93 94       	inc	r9
		PORTD &= (~(1 << Trigger_pin));
		
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
     76a:	5a 2c       	mov	r5, r10
		
	}
		distance = Mode(arrayX,NUMBER_OF_SAMPLES);
		distanceX=round(distance);
		dtostrf(distanceX, 2, 2, stringX);/* distance to string */
		strcat(stringX, " cm   ");	/* Concat unit i.e.cm */
     76c:	0f 2e       	mov	r0, r31
     76e:	f7 e0       	ldi	r31, 0x07	; 7
     770:	4f 2e       	mov	r4, r31
     772:	f0 2d       	mov	r31, r0

	while(1)
	{
		
		//select the 1st sonar sensor
		PORTB &= 0b11101111;//setting PB4=0;
     774:	c4 98       	cbi	0x18, 4	; 24
     776:	e1 01       	movw	r28, r2
		
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
	for(x=0;x<NUMBER_OF_SAMPLES;x++){	
		PORTD |= (1 << Trigger_pin);
     778:	97 9a       	sbi	0x12, 7	; 18
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	8a 95       	dec	r24
     77e:	f1 f7       	brne	.-4      	; 0x77c <main+0x84>
     780:	00 00       	nop
		_delay_us(10);
		PORTD &= (~(1 << Trigger_pin));
     782:	97 98       	cbi	0x12, 7	; 18
		
		TCNT1 = 0;	/* Clear Timer counter */
     784:	1d bc       	out	0x2d, r1	; 45
     786:	1c bc       	out	0x2c, r1	; 44
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
     788:	6e bc       	out	0x2e, r6	; 46
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     78a:	78 be       	out	0x38, r7	; 56
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
     78c:	58 be       	out	0x38, r5	; 56

		/*Calculate width of Echo by Input Capture (ICP) */
		
		while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
     78e:	08 b6       	in	r0, 0x38	; 56
     790:	05 fe       	sbrs	r0, 5
     792:	fd cf       	rjmp	.-6      	; 0x78e <main+0x96>
		TCNT1 = 0;	/* Clear Timer counter */
     794:	1d bc       	out	0x2d, r1	; 45
     796:	1c bc       	out	0x2c, r1	; 44
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
     798:	9e bc       	out	0x2e, r9	; 46
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     79a:	b8 be       	out	0x38, r11	; 56
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
     79c:	a8 be       	out	0x38, r10	; 56
		TimerOverflow = 0;/* Clear Timer overflow count */
     79e:	10 92 91 00 	sts	0x0091, r1
     7a2:	10 92 90 00 	sts	0x0090, r1

		while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
     7a6:	08 b6       	in	r0, 0x38	; 56
     7a8:	05 fe       	sbrs	r0, 5
     7aa:	fd cf       	rjmp	.-6      	; 0x7a6 <main+0xae>
		count = ICR1 + (65535 * TimerOverflow);	/* Take count */
     7ac:	66 b5       	in	r22, 0x26	; 38
     7ae:	77 b5       	in	r23, 0x27	; 39
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
		/* 8MHz Timer freq, sound speed =343 m/s */
	//	distance = (double)count / 58.3;
		arrayX[x] =round( (double)count / 58.3);
     7b4:	0e 94 c8 05 	call	0xb90	; 0xb90 <__floatsisf>
     7b8:	23 e3       	ldi	r18, 0x33	; 51
     7ba:	33 e3       	ldi	r19, 0x33	; 51
     7bc:	49 e6       	ldi	r20, 0x69	; 105
     7be:	52 e4       	ldi	r21, 0x42	; 66
     7c0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__divsf3>
     7c4:	0e 94 78 06 	call	0xcf0	; 0xcf0 <round>
     7c8:	69 93       	st	Y+, r22
     7ca:	79 93       	st	Y+, r23
     7cc:	89 93       	st	Y+, r24
     7ce:	99 93       	st	Y+, r25
		
		//select the 1st sonar sensor
		PORTB &= 0b11101111;//setting PB4=0;
		
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
	for(x=0;x<NUMBER_OF_SAMPLES;x++){	
     7d0:	cc 15       	cp	r28, r12
     7d2:	dd 05       	cpc	r29, r13
     7d4:	89 f6       	brne	.-94     	; 0x778 <main+0x80>
		/* 8MHz Timer freq, sound speed =343 m/s */
	//	distance = (double)count / 58.3;
		arrayX[x] =round( (double)count / 58.3);
		
	}
		distance = Mode(arrayX,NUMBER_OF_SAMPLES);
     7d6:	6a e0       	ldi	r22, 0x0A	; 10
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	c1 01       	movw	r24, r2
     7dc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Mode>
		distanceX=round(distance);
     7e0:	0e 94 78 06 	call	0xcf0	; 0xcf0 <round>
     7e4:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fixsfsi>
     7e8:	70 93 f9 00 	sts	0x00F9, r23
     7ec:	60 93 f8 00 	sts	0x00F8, r22
		dtostrf(distanceX, 2, 2, stringX);/* distance to string */
     7f0:	88 27       	eor	r24, r24
     7f2:	77 fd       	sbrc	r23, 7
     7f4:	80 95       	com	r24
     7f6:	98 2f       	mov	r25, r24
     7f8:	0e 94 c8 05 	call	0xb90	; 0xb90 <__floatsisf>
     7fc:	0a e7       	ldi	r16, 0x7A	; 122
     7fe:	11 e0       	ldi	r17, 0x01	; 1
     800:	22 e0       	ldi	r18, 0x02	; 2
     802:	42 e0       	ldi	r20, 0x02	; 2
     804:	0e 94 c1 06 	call	0xd82	; 0xd82 <dtostrf>
		strcat(stringX, " cm   ");	/* Concat unit i.e.cm */
     808:	d8 01       	movw	r26, r16
     80a:	0d 90       	ld	r0, X+
     80c:	00 20       	and	r0, r0
     80e:	e9 f7       	brne	.-6      	; 0x80a <main+0x112>
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	e7 e7       	ldi	r30, 0x77	; 119
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	84 2d       	mov	r24, r4
     818:	01 90       	ld	r0, Z+
     81a:	0d 92       	st	X+, r0
     81c:	8a 95       	dec	r24
     81e:	e1 f7       	brne	.-8      	; 0x818 <main+0x120>
		LCDClear();
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	89 2d       	mov	r24, r9
     824:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDByte>
		LCDWriteStringXY(0, 0, "X = ");
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDGotoXY>
     830:	8e e7       	ldi	r24, 0x7E	; 126
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDWriteString>
		LCDWriteStringXY(5, 0, stringX);	/* Print distance */
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	85 e0       	ldi	r24, 0x05	; 5
     83c:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDGotoXY>
     840:	c8 01       	movw	r24, r16
     842:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     846:	8f e4       	ldi	r24, 0x4F	; 79
     848:	93 ec       	ldi	r25, 0xC3	; 195
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <main+0x152>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <main+0x158>
     850:	00 00       	nop
		_delay_ms(200);
			
			///selecting 2nd sensor
			PORTB |= 0b00010000;//PB4=1;
     852:	c4 9a       	sbi	0x18, 4	; 24
     854:	c6 ea       	ldi	r28, 0xA6	; 166
     856:	d0 e0       	ldi	r29, 0x00	; 0
			
			/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		for(y=0;y<NUMBER_OF_SAMPLES;y++){	
			PORTD |= (1 << Trigger_pin);
     858:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     85a:	93 e0       	ldi	r25, 0x03	; 3
     85c:	9a 95       	dec	r25
     85e:	f1 f7       	brne	.-4      	; 0x85c <main+0x164>
     860:	00 00       	nop
			_delay_us(10);
			PORTD &= (~(1 << Trigger_pin));
     862:	97 98       	cbi	0x12, 7	; 18
			
			TCNT1 = 0;	/* Clear Timer counter */
     864:	1d bc       	out	0x2d, r1	; 45
     866:	1c bc       	out	0x2c, r1	; 44
			TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
     868:	8e bc       	out	0x2e, r8	; 46
			TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     86a:	b8 be       	out	0x38, r11	; 56
			TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
     86c:	a8 be       	out	0x38, r10	; 56

			/*Calculate width of Echo by Input Capture (ICP) */
			
			while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
     86e:	08 b6       	in	r0, 0x38	; 56
     870:	05 fe       	sbrs	r0, 5
     872:	fd cf       	rjmp	.-6      	; 0x86e <__stack+0xf>
			TCNT1 = 0;	/* Clear Timer counter */
     874:	1d bc       	out	0x2d, r1	; 45
     876:	1c bc       	out	0x2c, r1	; 44
			TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
     878:	9e bc       	out	0x2e, r9	; 46
			TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     87a:	b8 be       	out	0x38, r11	; 56
			TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
     87c:	a8 be       	out	0x38, r10	; 56
			TimerOverflow = 0;/* Clear Timer overflow count */
     87e:	10 92 91 00 	sts	0x0091, r1
     882:	10 92 90 00 	sts	0x0090, r1

			while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
     886:	08 b6       	in	r0, 0x38	; 56
     888:	05 fe       	sbrs	r0, 5
     88a:	fd cf       	rjmp	.-6      	; 0x886 <__stack+0x27>
			count = ICR1 + (65535 * TimerOverflow);	/* Take count */
     88c:	66 b5       	in	r22, 0x26	; 38
     88e:	77 b5       	in	r23, 0x27	; 39
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
			/* 8MHz Timer freq, sound speed =343 m/s */
			//distance = (double)count / 58.3;
			arrayY[y] =round( (double)count / 58.3);
     894:	0e 94 c8 05 	call	0xb90	; 0xb90 <__floatsisf>
     898:	23 e3       	ldi	r18, 0x33	; 51
     89a:	33 e3       	ldi	r19, 0x33	; 51
     89c:	49 e6       	ldi	r20, 0x69	; 105
     89e:	52 e4       	ldi	r21, 0x42	; 66
     8a0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__divsf3>
     8a4:	0e 94 78 06 	call	0xcf0	; 0xcf0 <round>
     8a8:	69 93       	st	Y+, r22
     8aa:	79 93       	st	Y+, r23
     8ac:	89 93       	st	Y+, r24
     8ae:	99 93       	st	Y+, r25
			
			///selecting 2nd sensor
			PORTB |= 0b00010000;//PB4=1;
			
			/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		for(y=0;y<NUMBER_OF_SAMPLES;y++){	
     8b0:	ce 15       	cp	r28, r14
     8b2:	df 05       	cpc	r29, r15
     8b4:	89 f6       	brne	.-94     	; 0x858 <main+0x160>
			/* 8MHz Timer freq, sound speed =343 m/s */
			//distance = (double)count / 58.3;
			arrayY[y] =round( (double)count / 58.3);
	
		}
			distance = Mode(arrayY,NUMBER_OF_SAMPLES);		distanceY=round(distance);
     8b6:	6a e0       	ldi	r22, 0x0A	; 10
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	86 ea       	ldi	r24, 0xA6	; 166
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Mode>
     8c2:	0e 94 78 06 	call	0xcf0	; 0xcf0 <round>
     8c6:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fixsfsi>
     8ca:	70 93 f7 00 	sts	0x00F7, r23
     8ce:	60 93 f6 00 	sts	0x00F6, r22
			dtostrf(distanceY, 2, 2, stringY);/* distance to string */
     8d2:	88 27       	eor	r24, r24
     8d4:	77 fd       	sbrc	r23, 7
     8d6:	80 95       	com	r24
     8d8:	98 2f       	mov	r25, r24
     8da:	0e 94 c8 05 	call	0xb90	; 0xb90 <__floatsisf>
     8de:	04 e0       	ldi	r16, 0x04	; 4
     8e0:	12 e0       	ldi	r17, 0x02	; 2
     8e2:	22 e0       	ldi	r18, 0x02	; 2
     8e4:	42 e0       	ldi	r20, 0x02	; 2
     8e6:	0e 94 c1 06 	call	0xd82	; 0xd82 <dtostrf>
			strcat(stringY, " cm   ");	/* Concat unit i.e.cm */
     8ea:	d8 01       	movw	r26, r16
     8ec:	0d 90       	ld	r0, X+
     8ee:	00 20       	and	r0, r0
     8f0:	e9 f7       	brne	.-6      	; 0x8ec <__stack+0x8d>
     8f2:	11 97       	sbiw	r26, 0x01	; 1
     8f4:	e7 e7       	ldi	r30, 0x77	; 119
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	84 2d       	mov	r24, r4
     8fa:	01 90       	ld	r0, Z+
     8fc:	0d 92       	st	X+, r0
     8fe:	8a 95       	dec	r24
     900:	e1 f7       	brne	.-8      	; 0x8fa <__stack+0x9b>
			LCDWriteStringXY(0, 1, "Y = ");
     902:	69 2d       	mov	r22, r9
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDGotoXY>
     90a:	83 e8       	ldi	r24, 0x83	; 131
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDWriteString>
			LCDWriteStringXY(5, 1, stringY);	/* Print distance */
     912:	69 2d       	mov	r22, r9
     914:	85 e0       	ldi	r24, 0x05	; 5
     916:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDGotoXY>
     91a:	c8 01       	movw	r24, r16
     91c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     920:	8f e4       	ldi	r24, 0x4F	; 79
     922:	93 ec       	ldi	r25, 0xC3	; 195
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <__stack+0xc5>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0xcb>
     92a:	00 00       	nop
}



void set_mode_of_painting (int _mode){
	mode = _mode;
     92c:	80 91 60 00 	lds	r24, 0x0060
     930:	90 91 61 00 	lds	r25, 0x0061
     934:	90 93 6b 00 	sts	0x006B, r25
     938:	80 93 6a 00 	sts	0x006A, r24
			_delay_ms(200);
		
		
		set_mode_of_painting(myDrawingMode);
		set_cursor_from_sensor_data(distanceX, distanceY);
     93c:	60 91 f6 00 	lds	r22, 0x00F6
     940:	70 91 f7 00 	lds	r23, 0x00F7
     944:	80 91 f8 00 	lds	r24, 0x00F8
     948:	90 91 f9 00 	lds	r25, 0x00F9
     94c:	0e 94 67 02 	call	0x4ce	; 0x4ce <set_cursor_from_sensor_data>
		draw_board();	
     950:	0e 94 c2 01 	call	0x384	; 0x384 <draw_board>
		
		
		if (PIND & (1<<PD3)){
     954:	83 9b       	sbis	0x10, 3	; 16
     956:	0e cf       	rjmp	.-484    	; 0x774 <main+0x7c>
			LCDClear();
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDByte>
			LCDWriteStringXY(0,0, "Erase!!");
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 2d 01 	call	0x25a	; 0x25a <LCDGotoXY>
     968:	88 e8       	ldi	r24, 0x88	; 136
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDWriteString>
			reset_board();
     970:	0e 94 b0 02 	call	0x560	; 0x560 <reset_board>
			
			DDRD |= (0b100001000);
     974:	8b 9a       	sbi	0x11, 3	; 17
			PORTD&=(0b11110111);
     976:	93 98       	cbi	0x12, 3	; 18
			DDRD &= (0b11110111);
     978:	8b 98       	cbi	0x11, 3	; 17
     97a:	87 ea       	ldi	r24, 0xA7	; 167
     97c:	91 e6       	ldi	r25, 0x61	; 97
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	f1 f7       	brne	.-4      	; 0x97e <__stack+0x11f>
     982:	00 c0       	rjmp	.+0      	; 0x984 <__stack+0x125>
     984:	00 00       	nop
     986:	ec ce       	rjmp	.-552    	; 0x760 <main+0x68>

00000988 <__subsf3>:
     988:	50 58       	subi	r21, 0x80	; 128

0000098a <__addsf3>:
     98a:	bb 27       	eor	r27, r27
     98c:	aa 27       	eor	r26, r26
     98e:	0e d0       	rcall	.+28     	; 0x9ac <__addsf3x>
     990:	75 c1       	rjmp	.+746    	; 0xc7c <__fp_round>
     992:	66 d1       	rcall	.+716    	; 0xc60 <__fp_pscA>
     994:	30 f0       	brcs	.+12     	; 0x9a2 <__addsf3+0x18>
     996:	6b d1       	rcall	.+726    	; 0xc6e <__fp_pscB>
     998:	20 f0       	brcs	.+8      	; 0x9a2 <__addsf3+0x18>
     99a:	31 f4       	brne	.+12     	; 0x9a8 <__addsf3+0x1e>
     99c:	9f 3f       	cpi	r25, 0xFF	; 255
     99e:	11 f4       	brne	.+4      	; 0x9a4 <__addsf3+0x1a>
     9a0:	1e f4       	brtc	.+6      	; 0x9a8 <__addsf3+0x1e>
     9a2:	5b c1       	rjmp	.+694    	; 0xc5a <__fp_nan>
     9a4:	0e f4       	brtc	.+2      	; 0x9a8 <__addsf3+0x1e>
     9a6:	e0 95       	com	r30
     9a8:	e7 fb       	bst	r30, 7
     9aa:	51 c1       	rjmp	.+674    	; 0xc4e <__fp_inf>

000009ac <__addsf3x>:
     9ac:	e9 2f       	mov	r30, r25
     9ae:	77 d1       	rcall	.+750    	; 0xc9e <__fp_split3>
     9b0:	80 f3       	brcs	.-32     	; 0x992 <__addsf3+0x8>
     9b2:	ba 17       	cp	r27, r26
     9b4:	62 07       	cpc	r22, r18
     9b6:	73 07       	cpc	r23, r19
     9b8:	84 07       	cpc	r24, r20
     9ba:	95 07       	cpc	r25, r21
     9bc:	18 f0       	brcs	.+6      	; 0x9c4 <__addsf3x+0x18>
     9be:	71 f4       	brne	.+28     	; 0x9dc <__addsf3x+0x30>
     9c0:	9e f5       	brtc	.+102    	; 0xa28 <__addsf3x+0x7c>
     9c2:	8f c1       	rjmp	.+798    	; 0xce2 <__fp_zero>
     9c4:	0e f4       	brtc	.+2      	; 0x9c8 <__addsf3x+0x1c>
     9c6:	e0 95       	com	r30
     9c8:	0b 2e       	mov	r0, r27
     9ca:	ba 2f       	mov	r27, r26
     9cc:	a0 2d       	mov	r26, r0
     9ce:	0b 01       	movw	r0, r22
     9d0:	b9 01       	movw	r22, r18
     9d2:	90 01       	movw	r18, r0
     9d4:	0c 01       	movw	r0, r24
     9d6:	ca 01       	movw	r24, r20
     9d8:	a0 01       	movw	r20, r0
     9da:	11 24       	eor	r1, r1
     9dc:	ff 27       	eor	r31, r31
     9de:	59 1b       	sub	r21, r25
     9e0:	99 f0       	breq	.+38     	; 0xa08 <__addsf3x+0x5c>
     9e2:	59 3f       	cpi	r21, 0xF9	; 249
     9e4:	50 f4       	brcc	.+20     	; 0x9fa <__addsf3x+0x4e>
     9e6:	50 3e       	cpi	r21, 0xE0	; 224
     9e8:	68 f1       	brcs	.+90     	; 0xa44 <__addsf3x+0x98>
     9ea:	1a 16       	cp	r1, r26
     9ec:	f0 40       	sbci	r31, 0x00	; 0
     9ee:	a2 2f       	mov	r26, r18
     9f0:	23 2f       	mov	r18, r19
     9f2:	34 2f       	mov	r19, r20
     9f4:	44 27       	eor	r20, r20
     9f6:	58 5f       	subi	r21, 0xF8	; 248
     9f8:	f3 cf       	rjmp	.-26     	; 0x9e0 <__addsf3x+0x34>
     9fa:	46 95       	lsr	r20
     9fc:	37 95       	ror	r19
     9fe:	27 95       	ror	r18
     a00:	a7 95       	ror	r26
     a02:	f0 40       	sbci	r31, 0x00	; 0
     a04:	53 95       	inc	r21
     a06:	c9 f7       	brne	.-14     	; 0x9fa <__addsf3x+0x4e>
     a08:	7e f4       	brtc	.+30     	; 0xa28 <__addsf3x+0x7c>
     a0a:	1f 16       	cp	r1, r31
     a0c:	ba 0b       	sbc	r27, r26
     a0e:	62 0b       	sbc	r22, r18
     a10:	73 0b       	sbc	r23, r19
     a12:	84 0b       	sbc	r24, r20
     a14:	ba f0       	brmi	.+46     	; 0xa44 <__addsf3x+0x98>
     a16:	91 50       	subi	r25, 0x01	; 1
     a18:	a1 f0       	breq	.+40     	; 0xa42 <__addsf3x+0x96>
     a1a:	ff 0f       	add	r31, r31
     a1c:	bb 1f       	adc	r27, r27
     a1e:	66 1f       	adc	r22, r22
     a20:	77 1f       	adc	r23, r23
     a22:	88 1f       	adc	r24, r24
     a24:	c2 f7       	brpl	.-16     	; 0xa16 <__addsf3x+0x6a>
     a26:	0e c0       	rjmp	.+28     	; 0xa44 <__addsf3x+0x98>
     a28:	ba 0f       	add	r27, r26
     a2a:	62 1f       	adc	r22, r18
     a2c:	73 1f       	adc	r23, r19
     a2e:	84 1f       	adc	r24, r20
     a30:	48 f4       	brcc	.+18     	; 0xa44 <__addsf3x+0x98>
     a32:	87 95       	ror	r24
     a34:	77 95       	ror	r23
     a36:	67 95       	ror	r22
     a38:	b7 95       	ror	r27
     a3a:	f7 95       	ror	r31
     a3c:	9e 3f       	cpi	r25, 0xFE	; 254
     a3e:	08 f0       	brcs	.+2      	; 0xa42 <__addsf3x+0x96>
     a40:	b3 cf       	rjmp	.-154    	; 0x9a8 <__addsf3+0x1e>
     a42:	93 95       	inc	r25
     a44:	88 0f       	add	r24, r24
     a46:	08 f0       	brcs	.+2      	; 0xa4a <__addsf3x+0x9e>
     a48:	99 27       	eor	r25, r25
     a4a:	ee 0f       	add	r30, r30
     a4c:	97 95       	ror	r25
     a4e:	87 95       	ror	r24
     a50:	08 95       	ret

00000a52 <__cmpsf2>:
     a52:	d9 d0       	rcall	.+434    	; 0xc06 <__fp_cmp>
     a54:	08 f4       	brcc	.+2      	; 0xa58 <__cmpsf2+0x6>
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	08 95       	ret

00000a5a <__divsf3>:
     a5a:	0c d0       	rcall	.+24     	; 0xa74 <__divsf3x>
     a5c:	0f c1       	rjmp	.+542    	; 0xc7c <__fp_round>
     a5e:	07 d1       	rcall	.+526    	; 0xc6e <__fp_pscB>
     a60:	40 f0       	brcs	.+16     	; 0xa72 <__divsf3+0x18>
     a62:	fe d0       	rcall	.+508    	; 0xc60 <__fp_pscA>
     a64:	30 f0       	brcs	.+12     	; 0xa72 <__divsf3+0x18>
     a66:	21 f4       	brne	.+8      	; 0xa70 <__divsf3+0x16>
     a68:	5f 3f       	cpi	r21, 0xFF	; 255
     a6a:	19 f0       	breq	.+6      	; 0xa72 <__divsf3+0x18>
     a6c:	f0 c0       	rjmp	.+480    	; 0xc4e <__fp_inf>
     a6e:	51 11       	cpse	r21, r1
     a70:	39 c1       	rjmp	.+626    	; 0xce4 <__fp_szero>
     a72:	f3 c0       	rjmp	.+486    	; 0xc5a <__fp_nan>

00000a74 <__divsf3x>:
     a74:	14 d1       	rcall	.+552    	; 0xc9e <__fp_split3>
     a76:	98 f3       	brcs	.-26     	; 0xa5e <__divsf3+0x4>

00000a78 <__divsf3_pse>:
     a78:	99 23       	and	r25, r25
     a7a:	c9 f3       	breq	.-14     	; 0xa6e <__divsf3+0x14>
     a7c:	55 23       	and	r21, r21
     a7e:	b1 f3       	breq	.-20     	; 0xa6c <__divsf3+0x12>
     a80:	95 1b       	sub	r25, r21
     a82:	55 0b       	sbc	r21, r21
     a84:	bb 27       	eor	r27, r27
     a86:	aa 27       	eor	r26, r26
     a88:	62 17       	cp	r22, r18
     a8a:	73 07       	cpc	r23, r19
     a8c:	84 07       	cpc	r24, r20
     a8e:	38 f0       	brcs	.+14     	; 0xa9e <__divsf3_pse+0x26>
     a90:	9f 5f       	subi	r25, 0xFF	; 255
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	22 0f       	add	r18, r18
     a96:	33 1f       	adc	r19, r19
     a98:	44 1f       	adc	r20, r20
     a9a:	aa 1f       	adc	r26, r26
     a9c:	a9 f3       	breq	.-22     	; 0xa88 <__divsf3_pse+0x10>
     a9e:	33 d0       	rcall	.+102    	; 0xb06 <__divsf3_pse+0x8e>
     aa0:	0e 2e       	mov	r0, r30
     aa2:	3a f0       	brmi	.+14     	; 0xab2 <__divsf3_pse+0x3a>
     aa4:	e0 e8       	ldi	r30, 0x80	; 128
     aa6:	30 d0       	rcall	.+96     	; 0xb08 <__divsf3_pse+0x90>
     aa8:	91 50       	subi	r25, 0x01	; 1
     aaa:	50 40       	sbci	r21, 0x00	; 0
     aac:	e6 95       	lsr	r30
     aae:	00 1c       	adc	r0, r0
     ab0:	ca f7       	brpl	.-14     	; 0xaa4 <__divsf3_pse+0x2c>
     ab2:	29 d0       	rcall	.+82     	; 0xb06 <__divsf3_pse+0x8e>
     ab4:	fe 2f       	mov	r31, r30
     ab6:	27 d0       	rcall	.+78     	; 0xb06 <__divsf3_pse+0x8e>
     ab8:	66 0f       	add	r22, r22
     aba:	77 1f       	adc	r23, r23
     abc:	88 1f       	adc	r24, r24
     abe:	bb 1f       	adc	r27, r27
     ac0:	26 17       	cp	r18, r22
     ac2:	37 07       	cpc	r19, r23
     ac4:	48 07       	cpc	r20, r24
     ac6:	ab 07       	cpc	r26, r27
     ac8:	b0 e8       	ldi	r27, 0x80	; 128
     aca:	09 f0       	breq	.+2      	; 0xace <__divsf3_pse+0x56>
     acc:	bb 0b       	sbc	r27, r27
     ace:	80 2d       	mov	r24, r0
     ad0:	bf 01       	movw	r22, r30
     ad2:	ff 27       	eor	r31, r31
     ad4:	93 58       	subi	r25, 0x83	; 131
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	2a f0       	brmi	.+10     	; 0xae4 <__divsf3_pse+0x6c>
     ada:	9e 3f       	cpi	r25, 0xFE	; 254
     adc:	51 05       	cpc	r21, r1
     ade:	68 f0       	brcs	.+26     	; 0xafa <__divsf3_pse+0x82>
     ae0:	b6 c0       	rjmp	.+364    	; 0xc4e <__fp_inf>
     ae2:	00 c1       	rjmp	.+512    	; 0xce4 <__fp_szero>
     ae4:	5f 3f       	cpi	r21, 0xFF	; 255
     ae6:	ec f3       	brlt	.-6      	; 0xae2 <__divsf3_pse+0x6a>
     ae8:	98 3e       	cpi	r25, 0xE8	; 232
     aea:	dc f3       	brlt	.-10     	; 0xae2 <__divsf3_pse+0x6a>
     aec:	86 95       	lsr	r24
     aee:	77 95       	ror	r23
     af0:	67 95       	ror	r22
     af2:	b7 95       	ror	r27
     af4:	f7 95       	ror	r31
     af6:	9f 5f       	subi	r25, 0xFF	; 255
     af8:	c9 f7       	brne	.-14     	; 0xaec <__divsf3_pse+0x74>
     afa:	88 0f       	add	r24, r24
     afc:	91 1d       	adc	r25, r1
     afe:	96 95       	lsr	r25
     b00:	87 95       	ror	r24
     b02:	97 f9       	bld	r25, 7
     b04:	08 95       	ret
     b06:	e1 e0       	ldi	r30, 0x01	; 1
     b08:	66 0f       	add	r22, r22
     b0a:	77 1f       	adc	r23, r23
     b0c:	88 1f       	adc	r24, r24
     b0e:	bb 1f       	adc	r27, r27
     b10:	62 17       	cp	r22, r18
     b12:	73 07       	cpc	r23, r19
     b14:	84 07       	cpc	r24, r20
     b16:	ba 07       	cpc	r27, r26
     b18:	20 f0       	brcs	.+8      	; 0xb22 <__divsf3_pse+0xaa>
     b1a:	62 1b       	sub	r22, r18
     b1c:	73 0b       	sbc	r23, r19
     b1e:	84 0b       	sbc	r24, r20
     b20:	ba 0b       	sbc	r27, r26
     b22:	ee 1f       	adc	r30, r30
     b24:	88 f7       	brcc	.-30     	; 0xb08 <__divsf3_pse+0x90>
     b26:	e0 95       	com	r30
     b28:	08 95       	ret

00000b2a <__fixsfsi>:
     b2a:	04 d0       	rcall	.+8      	; 0xb34 <__fixunssfsi>
     b2c:	68 94       	set
     b2e:	b1 11       	cpse	r27, r1
     b30:	d9 c0       	rjmp	.+434    	; 0xce4 <__fp_szero>
     b32:	08 95       	ret

00000b34 <__fixunssfsi>:
     b34:	bc d0       	rcall	.+376    	; 0xcae <__fp_splitA>
     b36:	88 f0       	brcs	.+34     	; 0xb5a <__fixunssfsi+0x26>
     b38:	9f 57       	subi	r25, 0x7F	; 127
     b3a:	90 f0       	brcs	.+36     	; 0xb60 <__fixunssfsi+0x2c>
     b3c:	b9 2f       	mov	r27, r25
     b3e:	99 27       	eor	r25, r25
     b40:	b7 51       	subi	r27, 0x17	; 23
     b42:	a0 f0       	brcs	.+40     	; 0xb6c <__fixunssfsi+0x38>
     b44:	d1 f0       	breq	.+52     	; 0xb7a <__fixunssfsi+0x46>
     b46:	66 0f       	add	r22, r22
     b48:	77 1f       	adc	r23, r23
     b4a:	88 1f       	adc	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	1a f0       	brmi	.+6      	; 0xb56 <__fixunssfsi+0x22>
     b50:	ba 95       	dec	r27
     b52:	c9 f7       	brne	.-14     	; 0xb46 <__fixunssfsi+0x12>
     b54:	12 c0       	rjmp	.+36     	; 0xb7a <__fixunssfsi+0x46>
     b56:	b1 30       	cpi	r27, 0x01	; 1
     b58:	81 f0       	breq	.+32     	; 0xb7a <__fixunssfsi+0x46>
     b5a:	c3 d0       	rcall	.+390    	; 0xce2 <__fp_zero>
     b5c:	b1 e0       	ldi	r27, 0x01	; 1
     b5e:	08 95       	ret
     b60:	c0 c0       	rjmp	.+384    	; 0xce2 <__fp_zero>
     b62:	67 2f       	mov	r22, r23
     b64:	78 2f       	mov	r23, r24
     b66:	88 27       	eor	r24, r24
     b68:	b8 5f       	subi	r27, 0xF8	; 248
     b6a:	39 f0       	breq	.+14     	; 0xb7a <__fixunssfsi+0x46>
     b6c:	b9 3f       	cpi	r27, 0xF9	; 249
     b6e:	cc f3       	brlt	.-14     	; 0xb62 <__fixunssfsi+0x2e>
     b70:	86 95       	lsr	r24
     b72:	77 95       	ror	r23
     b74:	67 95       	ror	r22
     b76:	b3 95       	inc	r27
     b78:	d9 f7       	brne	.-10     	; 0xb70 <__fixunssfsi+0x3c>
     b7a:	3e f4       	brtc	.+14     	; 0xb8a <__fixunssfsi+0x56>
     b7c:	90 95       	com	r25
     b7e:	80 95       	com	r24
     b80:	70 95       	com	r23
     b82:	61 95       	neg	r22
     b84:	7f 4f       	sbci	r23, 0xFF	; 255
     b86:	8f 4f       	sbci	r24, 0xFF	; 255
     b88:	9f 4f       	sbci	r25, 0xFF	; 255
     b8a:	08 95       	ret

00000b8c <__floatunsisf>:
     b8c:	e8 94       	clt
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__floatsisf+0x12>

00000b90 <__floatsisf>:
     b90:	97 fb       	bst	r25, 7
     b92:	3e f4       	brtc	.+14     	; 0xba2 <__floatsisf+0x12>
     b94:	90 95       	com	r25
     b96:	80 95       	com	r24
     b98:	70 95       	com	r23
     b9a:	61 95       	neg	r22
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	99 23       	and	r25, r25
     ba4:	a9 f0       	breq	.+42     	; 0xbd0 <__floatsisf+0x40>
     ba6:	f9 2f       	mov	r31, r25
     ba8:	96 e9       	ldi	r25, 0x96	; 150
     baa:	bb 27       	eor	r27, r27
     bac:	93 95       	inc	r25
     bae:	f6 95       	lsr	r31
     bb0:	87 95       	ror	r24
     bb2:	77 95       	ror	r23
     bb4:	67 95       	ror	r22
     bb6:	b7 95       	ror	r27
     bb8:	f1 11       	cpse	r31, r1
     bba:	f8 cf       	rjmp	.-16     	; 0xbac <__floatsisf+0x1c>
     bbc:	fa f4       	brpl	.+62     	; 0xbfc <__floatsisf+0x6c>
     bbe:	bb 0f       	add	r27, r27
     bc0:	11 f4       	brne	.+4      	; 0xbc6 <__floatsisf+0x36>
     bc2:	60 ff       	sbrs	r22, 0
     bc4:	1b c0       	rjmp	.+54     	; 0xbfc <__floatsisf+0x6c>
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	8f 4f       	sbci	r24, 0xFF	; 255
     bcc:	9f 4f       	sbci	r25, 0xFF	; 255
     bce:	16 c0       	rjmp	.+44     	; 0xbfc <__floatsisf+0x6c>
     bd0:	88 23       	and	r24, r24
     bd2:	11 f0       	breq	.+4      	; 0xbd8 <__floatsisf+0x48>
     bd4:	96 e9       	ldi	r25, 0x96	; 150
     bd6:	11 c0       	rjmp	.+34     	; 0xbfa <__floatsisf+0x6a>
     bd8:	77 23       	and	r23, r23
     bda:	21 f0       	breq	.+8      	; 0xbe4 <__floatsisf+0x54>
     bdc:	9e e8       	ldi	r25, 0x8E	; 142
     bde:	87 2f       	mov	r24, r23
     be0:	76 2f       	mov	r23, r22
     be2:	05 c0       	rjmp	.+10     	; 0xbee <__floatsisf+0x5e>
     be4:	66 23       	and	r22, r22
     be6:	71 f0       	breq	.+28     	; 0xc04 <__floatsisf+0x74>
     be8:	96 e8       	ldi	r25, 0x86	; 134
     bea:	86 2f       	mov	r24, r22
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	2a f0       	brmi	.+10     	; 0xbfc <__floatsisf+0x6c>
     bf2:	9a 95       	dec	r25
     bf4:	66 0f       	add	r22, r22
     bf6:	77 1f       	adc	r23, r23
     bf8:	88 1f       	adc	r24, r24
     bfa:	da f7       	brpl	.-10     	; 0xbf2 <__floatsisf+0x62>
     bfc:	88 0f       	add	r24, r24
     bfe:	96 95       	lsr	r25
     c00:	87 95       	ror	r24
     c02:	97 f9       	bld	r25, 7
     c04:	08 95       	ret

00000c06 <__fp_cmp>:
     c06:	99 0f       	add	r25, r25
     c08:	00 08       	sbc	r0, r0
     c0a:	55 0f       	add	r21, r21
     c0c:	aa 0b       	sbc	r26, r26
     c0e:	e0 e8       	ldi	r30, 0x80	; 128
     c10:	fe ef       	ldi	r31, 0xFE	; 254
     c12:	16 16       	cp	r1, r22
     c14:	17 06       	cpc	r1, r23
     c16:	e8 07       	cpc	r30, r24
     c18:	f9 07       	cpc	r31, r25
     c1a:	c0 f0       	brcs	.+48     	; 0xc4c <__fp_cmp+0x46>
     c1c:	12 16       	cp	r1, r18
     c1e:	13 06       	cpc	r1, r19
     c20:	e4 07       	cpc	r30, r20
     c22:	f5 07       	cpc	r31, r21
     c24:	98 f0       	brcs	.+38     	; 0xc4c <__fp_cmp+0x46>
     c26:	62 1b       	sub	r22, r18
     c28:	73 0b       	sbc	r23, r19
     c2a:	84 0b       	sbc	r24, r20
     c2c:	95 0b       	sbc	r25, r21
     c2e:	39 f4       	brne	.+14     	; 0xc3e <__fp_cmp+0x38>
     c30:	0a 26       	eor	r0, r26
     c32:	61 f0       	breq	.+24     	; 0xc4c <__fp_cmp+0x46>
     c34:	23 2b       	or	r18, r19
     c36:	24 2b       	or	r18, r20
     c38:	25 2b       	or	r18, r21
     c3a:	21 f4       	brne	.+8      	; 0xc44 <__fp_cmp+0x3e>
     c3c:	08 95       	ret
     c3e:	0a 26       	eor	r0, r26
     c40:	09 f4       	brne	.+2      	; 0xc44 <__fp_cmp+0x3e>
     c42:	a1 40       	sbci	r26, 0x01	; 1
     c44:	a6 95       	lsr	r26
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	81 1d       	adc	r24, r1
     c4a:	81 1d       	adc	r24, r1
     c4c:	08 95       	ret

00000c4e <__fp_inf>:
     c4e:	97 f9       	bld	r25, 7
     c50:	9f 67       	ori	r25, 0x7F	; 127
     c52:	80 e8       	ldi	r24, 0x80	; 128
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	08 95       	ret

00000c5a <__fp_nan>:
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	80 ec       	ldi	r24, 0xC0	; 192
     c5e:	08 95       	ret

00000c60 <__fp_pscA>:
     c60:	00 24       	eor	r0, r0
     c62:	0a 94       	dec	r0
     c64:	16 16       	cp	r1, r22
     c66:	17 06       	cpc	r1, r23
     c68:	18 06       	cpc	r1, r24
     c6a:	09 06       	cpc	r0, r25
     c6c:	08 95       	ret

00000c6e <__fp_pscB>:
     c6e:	00 24       	eor	r0, r0
     c70:	0a 94       	dec	r0
     c72:	12 16       	cp	r1, r18
     c74:	13 06       	cpc	r1, r19
     c76:	14 06       	cpc	r1, r20
     c78:	05 06       	cpc	r0, r21
     c7a:	08 95       	ret

00000c7c <__fp_round>:
     c7c:	09 2e       	mov	r0, r25
     c7e:	03 94       	inc	r0
     c80:	00 0c       	add	r0, r0
     c82:	11 f4       	brne	.+4      	; 0xc88 <__fp_round+0xc>
     c84:	88 23       	and	r24, r24
     c86:	52 f0       	brmi	.+20     	; 0xc9c <__fp_round+0x20>
     c88:	bb 0f       	add	r27, r27
     c8a:	40 f4       	brcc	.+16     	; 0xc9c <__fp_round+0x20>
     c8c:	bf 2b       	or	r27, r31
     c8e:	11 f4       	brne	.+4      	; 0xc94 <__fp_round+0x18>
     c90:	60 ff       	sbrs	r22, 0
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <__fp_round+0x20>
     c94:	6f 5f       	subi	r22, 0xFF	; 255
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	8f 4f       	sbci	r24, 0xFF	; 255
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	08 95       	ret

00000c9e <__fp_split3>:
     c9e:	57 fd       	sbrc	r21, 7
     ca0:	90 58       	subi	r25, 0x80	; 128
     ca2:	44 0f       	add	r20, r20
     ca4:	55 1f       	adc	r21, r21
     ca6:	59 f0       	breq	.+22     	; 0xcbe <__fp_splitA+0x10>
     ca8:	5f 3f       	cpi	r21, 0xFF	; 255
     caa:	71 f0       	breq	.+28     	; 0xcc8 <__fp_splitA+0x1a>
     cac:	47 95       	ror	r20

00000cae <__fp_splitA>:
     cae:	88 0f       	add	r24, r24
     cb0:	97 fb       	bst	r25, 7
     cb2:	99 1f       	adc	r25, r25
     cb4:	61 f0       	breq	.+24     	; 0xcce <__fp_splitA+0x20>
     cb6:	9f 3f       	cpi	r25, 0xFF	; 255
     cb8:	79 f0       	breq	.+30     	; 0xcd8 <__fp_splitA+0x2a>
     cba:	87 95       	ror	r24
     cbc:	08 95       	ret
     cbe:	12 16       	cp	r1, r18
     cc0:	13 06       	cpc	r1, r19
     cc2:	14 06       	cpc	r1, r20
     cc4:	55 1f       	adc	r21, r21
     cc6:	f2 cf       	rjmp	.-28     	; 0xcac <__fp_split3+0xe>
     cc8:	46 95       	lsr	r20
     cca:	f1 df       	rcall	.-30     	; 0xcae <__fp_splitA>
     ccc:	08 c0       	rjmp	.+16     	; 0xcde <__fp_splitA+0x30>
     cce:	16 16       	cp	r1, r22
     cd0:	17 06       	cpc	r1, r23
     cd2:	18 06       	cpc	r1, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	f1 cf       	rjmp	.-30     	; 0xcba <__fp_splitA+0xc>
     cd8:	86 95       	lsr	r24
     cda:	71 05       	cpc	r23, r1
     cdc:	61 05       	cpc	r22, r1
     cde:	08 94       	sec
     ce0:	08 95       	ret

00000ce2 <__fp_zero>:
     ce2:	e8 94       	clt

00000ce4 <__fp_szero>:
     ce4:	bb 27       	eor	r27, r27
     ce6:	66 27       	eor	r22, r22
     ce8:	77 27       	eor	r23, r23
     cea:	cb 01       	movw	r24, r22
     cec:	97 f9       	bld	r25, 7
     cee:	08 95       	ret

00000cf0 <round>:
     cf0:	de df       	rcall	.-68     	; 0xcae <__fp_splitA>
     cf2:	e0 f0       	brcs	.+56     	; 0xd2c <round+0x3c>
     cf4:	9e 37       	cpi	r25, 0x7E	; 126
     cf6:	d8 f0       	brcs	.+54     	; 0xd2e <round+0x3e>
     cf8:	96 39       	cpi	r25, 0x96	; 150
     cfa:	b8 f4       	brcc	.+46     	; 0xd2a <round+0x3a>
     cfc:	9e 38       	cpi	r25, 0x8E	; 142
     cfe:	48 f4       	brcc	.+18     	; 0xd12 <round+0x22>
     d00:	67 2f       	mov	r22, r23
     d02:	78 2f       	mov	r23, r24
     d04:	88 27       	eor	r24, r24
     d06:	98 5f       	subi	r25, 0xF8	; 248
     d08:	f9 cf       	rjmp	.-14     	; 0xcfc <round+0xc>
     d0a:	86 95       	lsr	r24
     d0c:	77 95       	ror	r23
     d0e:	67 95       	ror	r22
     d10:	93 95       	inc	r25
     d12:	95 39       	cpi	r25, 0x95	; 149
     d14:	d0 f3       	brcs	.-12     	; 0xd0a <round+0x1a>
     d16:	b6 2f       	mov	r27, r22
     d18:	b1 70       	andi	r27, 0x01	; 1
     d1a:	6b 0f       	add	r22, r27
     d1c:	71 1d       	adc	r23, r1
     d1e:	81 1d       	adc	r24, r1
     d20:	20 f4       	brcc	.+8      	; 0xd2a <round+0x3a>
     d22:	87 95       	ror	r24
     d24:	77 95       	ror	r23
     d26:	67 95       	ror	r22
     d28:	93 95       	inc	r25
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <__fp_mintl>
     d2c:	1c c0       	rjmp	.+56     	; 0xd66 <__fp_mpack>
     d2e:	da cf       	rjmp	.-76     	; 0xce4 <__fp_szero>

00000d30 <__fp_mintl>:
     d30:	88 23       	and	r24, r24
     d32:	71 f4       	brne	.+28     	; 0xd50 <__fp_mintl+0x20>
     d34:	77 23       	and	r23, r23
     d36:	21 f0       	breq	.+8      	; 0xd40 <__fp_mintl+0x10>
     d38:	98 50       	subi	r25, 0x08	; 8
     d3a:	87 2b       	or	r24, r23
     d3c:	76 2f       	mov	r23, r22
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <__fp_mintl+0x1e>
     d40:	66 23       	and	r22, r22
     d42:	11 f4       	brne	.+4      	; 0xd48 <__fp_mintl+0x18>
     d44:	99 27       	eor	r25, r25
     d46:	0d c0       	rjmp	.+26     	; 0xd62 <__fp_mintl+0x32>
     d48:	90 51       	subi	r25, 0x10	; 16
     d4a:	86 2b       	or	r24, r22
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	2a f0       	brmi	.+10     	; 0xd5c <__fp_mintl+0x2c>
     d52:	9a 95       	dec	r25
     d54:	66 0f       	add	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	88 1f       	adc	r24, r24
     d5a:	da f7       	brpl	.-10     	; 0xd52 <__fp_mintl+0x22>
     d5c:	88 0f       	add	r24, r24
     d5e:	96 95       	lsr	r25
     d60:	87 95       	ror	r24
     d62:	97 f9       	bld	r25, 7
     d64:	08 95       	ret

00000d66 <__fp_mpack>:
     d66:	9f 3f       	cpi	r25, 0xFF	; 255
     d68:	31 f0       	breq	.+12     	; 0xd76 <__fp_mpack_finite+0xc>

00000d6a <__fp_mpack_finite>:
     d6a:	91 50       	subi	r25, 0x01	; 1
     d6c:	20 f4       	brcc	.+8      	; 0xd76 <__fp_mpack_finite+0xc>
     d6e:	87 95       	ror	r24
     d70:	77 95       	ror	r23
     d72:	67 95       	ror	r22
     d74:	b7 95       	ror	r27
     d76:	88 0f       	add	r24, r24
     d78:	91 1d       	adc	r25, r1
     d7a:	96 95       	lsr	r25
     d7c:	87 95       	ror	r24
     d7e:	97 f9       	bld	r25, 7
     d80:	08 95       	ret

00000d82 <dtostrf>:
     d82:	ef 92       	push	r14
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	e8 01       	movw	r28, r16
     d8e:	47 ff       	sbrs	r20, 7
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <dtostrf+0x14>
     d92:	34 e1       	ldi	r19, 0x14	; 20
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <dtostrf+0x16>
     d96:	34 e0       	ldi	r19, 0x04	; 4
     d98:	e4 2f       	mov	r30, r20
     d9a:	ff 27       	eor	r31, r31
     d9c:	e7 fd       	sbrc	r30, 7
     d9e:	f0 95       	com	r31
     da0:	f7 ff       	sbrs	r31, 7
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <dtostrf+0x28>
     da4:	f1 95       	neg	r31
     da6:	e1 95       	neg	r30
     da8:	f1 09       	sbc	r31, r1
     daa:	e3 2e       	mov	r14, r19
     dac:	02 2f       	mov	r16, r18
     dae:	2e 2f       	mov	r18, r30
     db0:	ae 01       	movw	r20, r28
     db2:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <dtoa_prf>
     db6:	ce 01       	movw	r24, r28
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ef 90       	pop	r14
     dc2:	08 95       	ret

00000dc4 <dtoa_prf>:
     dc4:	6f 92       	push	r6
     dc6:	7f 92       	push	r7
     dc8:	9f 92       	push	r9
     dca:	af 92       	push	r10
     dcc:	bf 92       	push	r11
     dce:	cf 92       	push	r12
     dd0:	df 92       	push	r13
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	29 97       	sbiw	r28, 0x09	; 9
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	6a 01       	movw	r12, r20
     df0:	b2 2e       	mov	r11, r18
     df2:	10 2f       	mov	r17, r16
     df4:	0c 33       	cpi	r16, 0x3C	; 60
     df6:	20 f4       	brcc	.+8      	; 0xe00 <dtoa_prf+0x3c>
     df8:	ff 24       	eor	r15, r15
     dfa:	f3 94       	inc	r15
     dfc:	f0 0e       	add	r15, r16
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <dtoa_prf+0x40>
     e00:	4c e3       	ldi	r20, 0x3C	; 60
     e02:	f4 2e       	mov	r15, r20
     e04:	0f 2d       	mov	r16, r15
     e06:	27 e0       	ldi	r18, 0x07	; 7
     e08:	ae 01       	movw	r20, r28
     e0a:	4f 5f       	subi	r20, 0xFF	; 255
     e0c:	5f 4f       	sbci	r21, 0xFF	; 255
     e0e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__ftoa_engine>
     e12:	79 81       	ldd	r23, Y+1	; 0x01
     e14:	27 2f       	mov	r18, r23
     e16:	29 70       	andi	r18, 0x09	; 9
     e18:	21 30       	cpi	r18, 0x01	; 1
     e1a:	31 f0       	breq	.+12     	; 0xe28 <dtoa_prf+0x64>
     e1c:	e1 fc       	sbrc	r14, 1
     e1e:	06 c0       	rjmp	.+12     	; 0xe2c <dtoa_prf+0x68>
     e20:	e0 fc       	sbrc	r14, 0
     e22:	06 c0       	rjmp	.+12     	; 0xe30 <dtoa_prf+0x6c>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <dtoa_prf+0x6e>
     e28:	6d e2       	ldi	r22, 0x2D	; 45
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <dtoa_prf+0x6e>
     e2c:	6b e2       	ldi	r22, 0x2B	; 43
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <dtoa_prf+0x6e>
     e30:	60 e2       	ldi	r22, 0x20	; 32
     e32:	ae 2d       	mov	r26, r14
     e34:	a0 71       	andi	r26, 0x10	; 16
     e36:	73 ff       	sbrs	r23, 3
     e38:	36 c0       	rjmp	.+108    	; 0xea6 <dtoa_prf+0xe2>
     e3a:	66 23       	and	r22, r22
     e3c:	11 f0       	breq	.+4      	; 0xe42 <dtoa_prf+0x7e>
     e3e:	84 e0       	ldi	r24, 0x04	; 4
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <dtoa_prf+0x80>
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	8b 15       	cp	r24, r11
     e46:	10 f4       	brcc	.+4      	; 0xe4c <dtoa_prf+0x88>
     e48:	b8 1a       	sub	r11, r24
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <dtoa_prf+0x8a>
     e4c:	b1 2c       	mov	r11, r1
     e4e:	a1 11       	cpse	r26, r1
     e50:	0b c0       	rjmp	.+22     	; 0xe68 <dtoa_prf+0xa4>
     e52:	f6 01       	movw	r30, r12
     e54:	8b 2d       	mov	r24, r11
     e56:	90 e2       	ldi	r25, 0x20	; 32
     e58:	88 23       	and	r24, r24
     e5a:	19 f0       	breq	.+6      	; 0xe62 <dtoa_prf+0x9e>
     e5c:	91 93       	st	Z+, r25
     e5e:	81 50       	subi	r24, 0x01	; 1
     e60:	fb cf       	rjmp	.-10     	; 0xe58 <dtoa_prf+0x94>
     e62:	cb 0c       	add	r12, r11
     e64:	d1 1c       	adc	r13, r1
     e66:	b1 2c       	mov	r11, r1
     e68:	66 23       	and	r22, r22
     e6a:	31 f0       	breq	.+12     	; 0xe78 <dtoa_prf+0xb4>
     e6c:	f6 01       	movw	r30, r12
     e6e:	60 83       	st	Z, r22
     e70:	96 01       	movw	r18, r12
     e72:	2f 5f       	subi	r18, 0xFF	; 255
     e74:	3f 4f       	sbci	r19, 0xFF	; 255
     e76:	69 01       	movw	r12, r18
     e78:	c6 01       	movw	r24, r12
     e7a:	03 96       	adiw	r24, 0x03	; 3
     e7c:	e2 fe       	sbrs	r14, 2
     e7e:	05 c0       	rjmp	.+10     	; 0xe8a <dtoa_prf+0xc6>
     e80:	2e e4       	ldi	r18, 0x4E	; 78
     e82:	f6 01       	movw	r30, r12
     e84:	20 83       	st	Z, r18
     e86:	31 e4       	ldi	r19, 0x41	; 65
     e88:	04 c0       	rjmp	.+8      	; 0xe92 <dtoa_prf+0xce>
     e8a:	2e e6       	ldi	r18, 0x6E	; 110
     e8c:	f6 01       	movw	r30, r12
     e8e:	20 83       	st	Z, r18
     e90:	31 e6       	ldi	r19, 0x61	; 97
     e92:	31 83       	std	Z+1, r19	; 0x01
     e94:	22 83       	std	Z+2, r18	; 0x02
     e96:	fc 01       	movw	r30, r24
     e98:	2b 2d       	mov	r18, r11
     e9a:	30 e2       	ldi	r19, 0x20	; 32
     e9c:	22 23       	and	r18, r18
     e9e:	f1 f1       	breq	.+124    	; 0xf1c <dtoa_prf+0x158>
     ea0:	31 93       	st	Z+, r19
     ea2:	21 50       	subi	r18, 0x01	; 1
     ea4:	fb cf       	rjmp	.-10     	; 0xe9c <dtoa_prf+0xd8>
     ea6:	72 ff       	sbrs	r23, 2
     ea8:	40 c0       	rjmp	.+128    	; 0xf2a <dtoa_prf+0x166>
     eaa:	66 23       	and	r22, r22
     eac:	11 f0       	breq	.+4      	; 0xeb2 <dtoa_prf+0xee>
     eae:	84 e0       	ldi	r24, 0x04	; 4
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <dtoa_prf+0xf0>
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	8b 15       	cp	r24, r11
     eb6:	10 f4       	brcc	.+4      	; 0xebc <dtoa_prf+0xf8>
     eb8:	b8 1a       	sub	r11, r24
     eba:	01 c0       	rjmp	.+2      	; 0xebe <dtoa_prf+0xfa>
     ebc:	b1 2c       	mov	r11, r1
     ebe:	a1 11       	cpse	r26, r1
     ec0:	0b c0       	rjmp	.+22     	; 0xed8 <dtoa_prf+0x114>
     ec2:	f6 01       	movw	r30, r12
     ec4:	8b 2d       	mov	r24, r11
     ec6:	90 e2       	ldi	r25, 0x20	; 32
     ec8:	88 23       	and	r24, r24
     eca:	19 f0       	breq	.+6      	; 0xed2 <dtoa_prf+0x10e>
     ecc:	91 93       	st	Z+, r25
     ece:	81 50       	subi	r24, 0x01	; 1
     ed0:	fb cf       	rjmp	.-10     	; 0xec8 <dtoa_prf+0x104>
     ed2:	cb 0c       	add	r12, r11
     ed4:	d1 1c       	adc	r13, r1
     ed6:	b1 2c       	mov	r11, r1
     ed8:	66 23       	and	r22, r22
     eda:	31 f0       	breq	.+12     	; 0xee8 <dtoa_prf+0x124>
     edc:	f6 01       	movw	r30, r12
     ede:	60 83       	st	Z, r22
     ee0:	96 01       	movw	r18, r12
     ee2:	2f 5f       	subi	r18, 0xFF	; 255
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	69 01       	movw	r12, r18
     ee8:	c6 01       	movw	r24, r12
     eea:	03 96       	adiw	r24, 0x03	; 3
     eec:	e2 fe       	sbrs	r14, 2
     eee:	07 c0       	rjmp	.+14     	; 0xefe <dtoa_prf+0x13a>
     ef0:	29 e4       	ldi	r18, 0x49	; 73
     ef2:	f6 01       	movw	r30, r12
     ef4:	20 83       	st	Z, r18
     ef6:	2e e4       	ldi	r18, 0x4E	; 78
     ef8:	21 83       	std	Z+1, r18	; 0x01
     efa:	26 e4       	ldi	r18, 0x46	; 70
     efc:	06 c0       	rjmp	.+12     	; 0xf0a <dtoa_prf+0x146>
     efe:	29 e6       	ldi	r18, 0x69	; 105
     f00:	f6 01       	movw	r30, r12
     f02:	20 83       	st	Z, r18
     f04:	2e e6       	ldi	r18, 0x6E	; 110
     f06:	21 83       	std	Z+1, r18	; 0x01
     f08:	26 e6       	ldi	r18, 0x66	; 102
     f0a:	22 83       	std	Z+2, r18	; 0x02
     f0c:	fc 01       	movw	r30, r24
     f0e:	2b 2d       	mov	r18, r11
     f10:	30 e2       	ldi	r19, 0x20	; 32
     f12:	22 23       	and	r18, r18
     f14:	19 f0       	breq	.+6      	; 0xf1c <dtoa_prf+0x158>
     f16:	31 93       	st	Z+, r19
     f18:	21 50       	subi	r18, 0x01	; 1
     f1a:	fb cf       	rjmp	.-10     	; 0xf12 <dtoa_prf+0x14e>
     f1c:	fc 01       	movw	r30, r24
     f1e:	eb 0d       	add	r30, r11
     f20:	f1 1d       	adc	r31, r1
     f22:	10 82       	st	Z, r1
     f24:	8e ef       	ldi	r24, 0xFE	; 254
     f26:	9f ef       	ldi	r25, 0xFF	; 255
     f28:	b7 c0       	rjmp	.+366    	; 0x1098 <dtoa_prf+0x2d4>
     f2a:	b1 e0       	ldi	r27, 0x01	; 1
     f2c:	61 11       	cpse	r22, r1
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <dtoa_prf+0x16e>
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	4b 2f       	mov	r20, r27
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	18 16       	cp	r1, r24
     f38:	19 06       	cpc	r1, r25
     f3a:	24 f4       	brge	.+8      	; 0xf44 <dtoa_prf+0x180>
     f3c:	9c 01       	movw	r18, r24
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <dtoa_prf+0x184>
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	24 0f       	add	r18, r20
     f4a:	35 1f       	adc	r19, r21
     f4c:	11 23       	and	r17, r17
     f4e:	29 f0       	breq	.+10     	; 0xf5a <dtoa_prf+0x196>
     f50:	41 2f       	mov	r20, r17
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	4f 5f       	subi	r20, 0xFF	; 255
     f56:	5f 4f       	sbci	r21, 0xFF	; 255
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <dtoa_prf+0x19a>
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	42 0f       	add	r20, r18
     f60:	53 1f       	adc	r21, r19
     f62:	2b 2d       	mov	r18, r11
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	42 17       	cp	r20, r18
     f68:	53 07       	cpc	r21, r19
     f6a:	14 f4       	brge	.+4      	; 0xf70 <dtoa_prf+0x1ac>
     f6c:	b4 1a       	sub	r11, r20
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <dtoa_prf+0x1ae>
     f70:	b1 2c       	mov	r11, r1
     f72:	2e 2d       	mov	r18, r14
     f74:	28 71       	andi	r18, 0x18	; 24
     f76:	59 f4       	brne	.+22     	; 0xf8e <dtoa_prf+0x1ca>
     f78:	f6 01       	movw	r30, r12
     f7a:	2b 2d       	mov	r18, r11
     f7c:	30 e2       	ldi	r19, 0x20	; 32
     f7e:	22 23       	and	r18, r18
     f80:	19 f0       	breq	.+6      	; 0xf88 <dtoa_prf+0x1c4>
     f82:	31 93       	st	Z+, r19
     f84:	21 50       	subi	r18, 0x01	; 1
     f86:	fb cf       	rjmp	.-10     	; 0xf7e <dtoa_prf+0x1ba>
     f88:	cb 0c       	add	r12, r11
     f8a:	d1 1c       	adc	r13, r1
     f8c:	b1 2c       	mov	r11, r1
     f8e:	bb 23       	and	r27, r27
     f90:	31 f0       	breq	.+12     	; 0xf9e <dtoa_prf+0x1da>
     f92:	f6 01       	movw	r30, r12
     f94:	60 83       	st	Z, r22
     f96:	96 01       	movw	r18, r12
     f98:	2f 5f       	subi	r18, 0xFF	; 255
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	69 01       	movw	r12, r18
     f9e:	a1 11       	cpse	r26, r1
     fa0:	0b c0       	rjmp	.+22     	; 0xfb8 <dtoa_prf+0x1f4>
     fa2:	f6 01       	movw	r30, r12
     fa4:	2b 2d       	mov	r18, r11
     fa6:	30 e3       	ldi	r19, 0x30	; 48
     fa8:	22 23       	and	r18, r18
     faa:	19 f0       	breq	.+6      	; 0xfb2 <dtoa_prf+0x1ee>
     fac:	31 93       	st	Z+, r19
     fae:	21 50       	subi	r18, 0x01	; 1
     fb0:	fb cf       	rjmp	.-10     	; 0xfa8 <dtoa_prf+0x1e4>
     fb2:	cb 0c       	add	r12, r11
     fb4:	d1 1c       	adc	r13, r1
     fb6:	b1 2c       	mov	r11, r1
     fb8:	f8 0e       	add	r15, r24
     fba:	0a 81       	ldd	r16, Y+2	; 0x02
     fbc:	37 2f       	mov	r19, r23
     fbe:	30 71       	andi	r19, 0x10	; 16
     fc0:	a3 2e       	mov	r10, r19
     fc2:	74 ff       	sbrs	r23, 4
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <dtoa_prf+0x208>
     fc6:	01 33       	cpi	r16, 0x31	; 49
     fc8:	09 f4       	brne	.+2      	; 0xfcc <dtoa_prf+0x208>
     fca:	fa 94       	dec	r15
     fcc:	1f 14       	cp	r1, r15
     fce:	2c f4       	brge	.+10     	; 0xfda <dtoa_prf+0x216>
     fd0:	2f 2d       	mov	r18, r15
     fd2:	29 30       	cpi	r18, 0x09	; 9
     fd4:	18 f0       	brcs	.+6      	; 0xfdc <dtoa_prf+0x218>
     fd6:	28 e0       	ldi	r18, 0x08	; 8
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <dtoa_prf+0x218>
     fda:	21 e0       	ldi	r18, 0x01	; 1
     fdc:	68 2f       	mov	r22, r24
     fde:	39 2f       	mov	r19, r25
     fe0:	97 ff       	sbrs	r25, 7
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <dtoa_prf+0x224>
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	46 2f       	mov	r20, r22
     fea:	53 2f       	mov	r21, r19
     fec:	61 2c       	mov	r6, r1
     fee:	71 2c       	mov	r7, r1
     ff0:	3e e2       	ldi	r19, 0x2E	; 46
     ff2:	93 2e       	mov	r9, r19
     ff4:	bc 01       	movw	r22, r24
     ff6:	62 1b       	sub	r22, r18
     ff8:	71 09       	sbc	r23, r1
     ffa:	9b 01       	movw	r18, r22
     ffc:	dc 01       	movw	r26, r24
     ffe:	a4 1b       	sub	r26, r20
    1000:	b5 0b       	sbc	r27, r21
    1002:	e1 e0       	ldi	r30, 0x01	; 1
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	ec 0f       	add	r30, r28
    1008:	fd 1f       	adc	r31, r29
    100a:	ae 0f       	add	r26, r30
    100c:	bf 1f       	adc	r27, r31
    100e:	e1 2e       	mov	r14, r17
    1010:	f1 2c       	mov	r15, r1
    1012:	f1 94       	neg	r15
    1014:	e1 94       	neg	r14
    1016:	f1 08       	sbc	r15, r1
    1018:	4f 3f       	cpi	r20, 0xFF	; 255
    101a:	ff ef       	ldi	r31, 0xFF	; 255
    101c:	5f 07       	cpc	r21, r31
    101e:	31 f4       	brne	.+12     	; 0x102c <dtoa_prf+0x268>
    1020:	f6 01       	movw	r30, r12
    1022:	90 82       	st	Z, r9
    1024:	b6 01       	movw	r22, r12
    1026:	6f 5f       	subi	r22, 0xFF	; 255
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	6b 01       	movw	r12, r22
    102c:	84 17       	cp	r24, r20
    102e:	95 07       	cpc	r25, r21
    1030:	4c f0       	brlt	.+18     	; 0x1044 <dtoa_prf+0x280>
    1032:	24 17       	cp	r18, r20
    1034:	35 07       	cpc	r19, r21
    1036:	34 f4       	brge	.+12     	; 0x1044 <dtoa_prf+0x280>
    1038:	bd 01       	movw	r22, r26
    103a:	66 0d       	add	r22, r6
    103c:	77 1d       	adc	r23, r7
    103e:	fb 01       	movw	r30, r22
    1040:	11 81       	ldd	r17, Z+1	; 0x01
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <dtoa_prf+0x282>
    1044:	10 e3       	ldi	r17, 0x30	; 48
    1046:	41 50       	subi	r20, 0x01	; 1
    1048:	51 09       	sbc	r21, r1
    104a:	ff ef       	ldi	r31, 0xFF	; 255
    104c:	6f 1a       	sub	r6, r31
    104e:	7f 0a       	sbc	r7, r31
    1050:	b6 01       	movw	r22, r12
    1052:	6f 5f       	subi	r22, 0xFF	; 255
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	4e 15       	cp	r20, r14
    1058:	5f 05       	cpc	r21, r15
    105a:	24 f0       	brlt	.+8      	; 0x1064 <dtoa_prf+0x2a0>
    105c:	f6 01       	movw	r30, r12
    105e:	10 83       	st	Z, r17
    1060:	6b 01       	movw	r12, r22
    1062:	da cf       	rjmp	.-76     	; 0x1018 <dtoa_prf+0x254>
    1064:	48 17       	cp	r20, r24
    1066:	59 07       	cpc	r21, r25
    1068:	39 f4       	brne	.+14     	; 0x1078 <dtoa_prf+0x2b4>
    106a:	06 33       	cpi	r16, 0x36	; 54
    106c:	20 f4       	brcc	.+8      	; 0x1076 <dtoa_prf+0x2b2>
    106e:	05 33       	cpi	r16, 0x35	; 53
    1070:	19 f4       	brne	.+6      	; 0x1078 <dtoa_prf+0x2b4>
    1072:	a1 10       	cpse	r10, r1
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <dtoa_prf+0x2b4>
    1076:	11 e3       	ldi	r17, 0x31	; 49
    1078:	f6 01       	movw	r30, r12
    107a:	10 83       	st	Z, r17
    107c:	fb 01       	movw	r30, r22
    107e:	8b 2d       	mov	r24, r11
    1080:	90 e2       	ldi	r25, 0x20	; 32
    1082:	88 23       	and	r24, r24
    1084:	19 f0       	breq	.+6      	; 0x108c <dtoa_prf+0x2c8>
    1086:	91 93       	st	Z+, r25
    1088:	81 50       	subi	r24, 0x01	; 1
    108a:	fb cf       	rjmp	.-10     	; 0x1082 <dtoa_prf+0x2be>
    108c:	fb 01       	movw	r30, r22
    108e:	eb 0d       	add	r30, r11
    1090:	f1 1d       	adc	r31, r1
    1092:	10 82       	st	Z, r1
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	29 96       	adiw	r28, 0x09	; 9
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	cf 90       	pop	r12
    10b4:	bf 90       	pop	r11
    10b6:	af 90       	pop	r10
    10b8:	9f 90       	pop	r9
    10ba:	7f 90       	pop	r7
    10bc:	6f 90       	pop	r6
    10be:	08 95       	ret

000010c0 <__ftoa_engine>:
    10c0:	28 30       	cpi	r18, 0x08	; 8
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__ftoa_engine+0x6>
    10c4:	27 e0       	ldi	r18, 0x07	; 7
    10c6:	33 27       	eor	r19, r19
    10c8:	da 01       	movw	r26, r20
    10ca:	99 0f       	add	r25, r25
    10cc:	31 1d       	adc	r19, r1
    10ce:	87 fd       	sbrc	r24, 7
    10d0:	91 60       	ori	r25, 0x01	; 1
    10d2:	00 96       	adiw	r24, 0x00	; 0
    10d4:	61 05       	cpc	r22, r1
    10d6:	71 05       	cpc	r23, r1
    10d8:	39 f4       	brne	.+14     	; 0x10e8 <__ftoa_engine+0x28>
    10da:	32 60       	ori	r19, 0x02	; 2
    10dc:	2e 5f       	subi	r18, 0xFE	; 254
    10de:	3d 93       	st	X+, r19
    10e0:	30 e3       	ldi	r19, 0x30	; 48
    10e2:	2a 95       	dec	r18
    10e4:	e1 f7       	brne	.-8      	; 0x10de <__ftoa_engine+0x1e>
    10e6:	08 95       	ret
    10e8:	9f 3f       	cpi	r25, 0xFF	; 255
    10ea:	30 f0       	brcs	.+12     	; 0x10f8 <__ftoa_engine+0x38>
    10ec:	80 38       	cpi	r24, 0x80	; 128
    10ee:	71 05       	cpc	r23, r1
    10f0:	61 05       	cpc	r22, r1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <__ftoa_engine+0x36>
    10f4:	3c 5f       	subi	r19, 0xFC	; 252
    10f6:	3c 5f       	subi	r19, 0xFC	; 252
    10f8:	3d 93       	st	X+, r19
    10fa:	91 30       	cpi	r25, 0x01	; 1
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <__ftoa_engine+0x40>
    10fe:	80 68       	ori	r24, 0x80	; 128
    1100:	91 1d       	adc	r25, r1
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	1f 93       	push	r17
    1108:	0f 93       	push	r16
    110a:	ff 92       	push	r15
    110c:	ef 92       	push	r14
    110e:	19 2f       	mov	r17, r25
    1110:	98 7f       	andi	r25, 0xF8	; 248
    1112:	96 95       	lsr	r25
    1114:	e9 2f       	mov	r30, r25
    1116:	96 95       	lsr	r25
    1118:	96 95       	lsr	r25
    111a:	e9 0f       	add	r30, r25
    111c:	ff 27       	eor	r31, r31
    111e:	e2 55       	subi	r30, 0x52	; 82
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	99 27       	eor	r25, r25
    1124:	33 27       	eor	r19, r19
    1126:	ee 24       	eor	r14, r14
    1128:	ff 24       	eor	r15, r15
    112a:	a7 01       	movw	r20, r14
    112c:	e7 01       	movw	r28, r14
    112e:	05 90       	lpm	r0, Z+
    1130:	08 94       	sec
    1132:	07 94       	ror	r0
    1134:	28 f4       	brcc	.+10     	; 0x1140 <__ftoa_engine+0x80>
    1136:	36 0f       	add	r19, r22
    1138:	e7 1e       	adc	r14, r23
    113a:	f8 1e       	adc	r15, r24
    113c:	49 1f       	adc	r20, r25
    113e:	51 1d       	adc	r21, r1
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	88 1f       	adc	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	06 94       	lsr	r0
    114a:	a1 f7       	brne	.-24     	; 0x1134 <__ftoa_engine+0x74>
    114c:	05 90       	lpm	r0, Z+
    114e:	07 94       	ror	r0
    1150:	28 f4       	brcc	.+10     	; 0x115c <__ftoa_engine+0x9c>
    1152:	e7 0e       	add	r14, r23
    1154:	f8 1e       	adc	r15, r24
    1156:	49 1f       	adc	r20, r25
    1158:	56 1f       	adc	r21, r22
    115a:	c1 1d       	adc	r28, r1
    115c:	77 0f       	add	r23, r23
    115e:	88 1f       	adc	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	66 1f       	adc	r22, r22
    1164:	06 94       	lsr	r0
    1166:	a1 f7       	brne	.-24     	; 0x1150 <__ftoa_engine+0x90>
    1168:	05 90       	lpm	r0, Z+
    116a:	07 94       	ror	r0
    116c:	28 f4       	brcc	.+10     	; 0x1178 <__ftoa_engine+0xb8>
    116e:	f8 0e       	add	r15, r24
    1170:	49 1f       	adc	r20, r25
    1172:	56 1f       	adc	r21, r22
    1174:	c7 1f       	adc	r28, r23
    1176:	d1 1d       	adc	r29, r1
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	66 1f       	adc	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	06 94       	lsr	r0
    1182:	a1 f7       	brne	.-24     	; 0x116c <__ftoa_engine+0xac>
    1184:	05 90       	lpm	r0, Z+
    1186:	07 94       	ror	r0
    1188:	20 f4       	brcc	.+8      	; 0x1192 <__ftoa_engine+0xd2>
    118a:	49 0f       	add	r20, r25
    118c:	56 1f       	adc	r21, r22
    118e:	c7 1f       	adc	r28, r23
    1190:	d8 1f       	adc	r29, r24
    1192:	99 0f       	add	r25, r25
    1194:	66 1f       	adc	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	88 1f       	adc	r24, r24
    119a:	06 94       	lsr	r0
    119c:	a9 f7       	brne	.-22     	; 0x1188 <__ftoa_engine+0xc8>
    119e:	84 91       	lpm	r24, Z
    11a0:	10 95       	com	r17
    11a2:	17 70       	andi	r17, 0x07	; 7
    11a4:	41 f0       	breq	.+16     	; 0x11b6 <__ftoa_engine+0xf6>
    11a6:	d6 95       	lsr	r29
    11a8:	c7 95       	ror	r28
    11aa:	57 95       	ror	r21
    11ac:	47 95       	ror	r20
    11ae:	f7 94       	ror	r15
    11b0:	e7 94       	ror	r14
    11b2:	1a 95       	dec	r17
    11b4:	c1 f7       	brne	.-16     	; 0x11a6 <__ftoa_engine+0xe6>
    11b6:	e4 e5       	ldi	r30, 0x54	; 84
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	68 94       	set
    11bc:	15 90       	lpm	r1, Z+
    11be:	15 91       	lpm	r17, Z+
    11c0:	35 91       	lpm	r19, Z+
    11c2:	65 91       	lpm	r22, Z+
    11c4:	95 91       	lpm	r25, Z+
    11c6:	05 90       	lpm	r0, Z+
    11c8:	7f e2       	ldi	r23, 0x2F	; 47
    11ca:	73 95       	inc	r23
    11cc:	e1 18       	sub	r14, r1
    11ce:	f1 0a       	sbc	r15, r17
    11d0:	43 0b       	sbc	r20, r19
    11d2:	56 0b       	sbc	r21, r22
    11d4:	c9 0b       	sbc	r28, r25
    11d6:	d0 09       	sbc	r29, r0
    11d8:	c0 f7       	brcc	.-16     	; 0x11ca <__ftoa_engine+0x10a>
    11da:	e1 0c       	add	r14, r1
    11dc:	f1 1e       	adc	r15, r17
    11de:	43 1f       	adc	r20, r19
    11e0:	56 1f       	adc	r21, r22
    11e2:	c9 1f       	adc	r28, r25
    11e4:	d0 1d       	adc	r29, r0
    11e6:	7e f4       	brtc	.+30     	; 0x1206 <__ftoa_engine+0x146>
    11e8:	70 33       	cpi	r23, 0x30	; 48
    11ea:	11 f4       	brne	.+4      	; 0x11f0 <__ftoa_engine+0x130>
    11ec:	8a 95       	dec	r24
    11ee:	e6 cf       	rjmp	.-52     	; 0x11bc <__ftoa_engine+0xfc>
    11f0:	e8 94       	clt
    11f2:	01 50       	subi	r16, 0x01	; 1
    11f4:	30 f0       	brcs	.+12     	; 0x1202 <__ftoa_engine+0x142>
    11f6:	08 0f       	add	r16, r24
    11f8:	0a f4       	brpl	.+2      	; 0x11fc <__ftoa_engine+0x13c>
    11fa:	00 27       	eor	r16, r16
    11fc:	02 17       	cp	r16, r18
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <__ftoa_engine+0x142>
    1200:	20 2f       	mov	r18, r16
    1202:	23 95       	inc	r18
    1204:	02 2f       	mov	r16, r18
    1206:	7a 33       	cpi	r23, 0x3A	; 58
    1208:	28 f0       	brcs	.+10     	; 0x1214 <__ftoa_engine+0x154>
    120a:	79 e3       	ldi	r23, 0x39	; 57
    120c:	7d 93       	st	X+, r23
    120e:	2a 95       	dec	r18
    1210:	e9 f7       	brne	.-6      	; 0x120c <__ftoa_engine+0x14c>
    1212:	10 c0       	rjmp	.+32     	; 0x1234 <__ftoa_engine+0x174>
    1214:	7d 93       	st	X+, r23
    1216:	2a 95       	dec	r18
    1218:	89 f6       	brne	.-94     	; 0x11bc <__ftoa_engine+0xfc>
    121a:	06 94       	lsr	r0
    121c:	97 95       	ror	r25
    121e:	67 95       	ror	r22
    1220:	37 95       	ror	r19
    1222:	17 95       	ror	r17
    1224:	17 94       	ror	r1
    1226:	e1 18       	sub	r14, r1
    1228:	f1 0a       	sbc	r15, r17
    122a:	43 0b       	sbc	r20, r19
    122c:	56 0b       	sbc	r21, r22
    122e:	c9 0b       	sbc	r28, r25
    1230:	d0 09       	sbc	r29, r0
    1232:	98 f0       	brcs	.+38     	; 0x125a <__ftoa_engine+0x19a>
    1234:	23 95       	inc	r18
    1236:	7e 91       	ld	r23, -X
    1238:	73 95       	inc	r23
    123a:	7a 33       	cpi	r23, 0x3A	; 58
    123c:	08 f0       	brcs	.+2      	; 0x1240 <__ftoa_engine+0x180>
    123e:	70 e3       	ldi	r23, 0x30	; 48
    1240:	7c 93       	st	X, r23
    1242:	20 13       	cpse	r18, r16
    1244:	b8 f7       	brcc	.-18     	; 0x1234 <__ftoa_engine+0x174>
    1246:	7e 91       	ld	r23, -X
    1248:	70 61       	ori	r23, 0x10	; 16
    124a:	7d 93       	st	X+, r23
    124c:	30 f0       	brcs	.+12     	; 0x125a <__ftoa_engine+0x19a>
    124e:	83 95       	inc	r24
    1250:	71 e3       	ldi	r23, 0x31	; 49
    1252:	7d 93       	st	X+, r23
    1254:	70 e3       	ldi	r23, 0x30	; 48
    1256:	2a 95       	dec	r18
    1258:	e1 f7       	brne	.-8      	; 0x1252 <__ftoa_engine+0x192>
    125a:	11 24       	eor	r1, r1
    125c:	ef 90       	pop	r14
    125e:	ff 90       	pop	r15
    1260:	0f 91       	pop	r16
    1262:	1f 91       	pop	r17
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	99 27       	eor	r25, r25
    126a:	87 fd       	sbrc	r24, 7
    126c:	90 95       	com	r25
    126e:	08 95       	ret

00001270 <_exit>:
    1270:	f8 94       	cli

00001272 <__stop_program>:
    1272:	ff cf       	rjmp	.-2      	; 0x1272 <__stop_program>
